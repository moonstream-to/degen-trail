// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.13;

/*
 * To regenerate this interface, run the following commands from the project root directory:
 * $ forge build
 * $ jq .abi out/Game.sol/DegenTrail.json | solface -annotations -name IDegenTrail
 */
// Interface generated by solface: https://github.com/moonstream-to/solface
// solface version: 0.2.3
// Interface ID: 177fa301
interface IDegenTrail {
    // structs

    // events
    event Approval(address owner, address spender, uint256 value);
    event Transfer(address from, address to, uint256 value);

    // functions
    // Selector: 9e269ea7
    function EnvironmentDistributions(uint256, uint256) external view returns (uint8);
    // Selector: 9160cd57
    function Hex(uint256, uint256) external view returns (uint256);
    // Selector: dd62ed3e
    function allowance(address owner, address spender) external view returns (uint256);
    // Selector: 095ea7b3
    function approve(address spender, uint256 value) external returns (bool);
    // Selector: 70a08231
    function balanceOf(address account) external view returns (uint256);
    // Selector: 4174d402
    function board(uint256[2][] memory indices) external view returns (uint256[3][] memory);
    // Selector: 42966c68
    function burn(uint256 amount) external;
    // Selector: 313ce567
    function decimals() external pure returns (uint8);
    // Selector: e3fc4210
    function environment(uint256 i) external pure returns (uint256);
    // Selector: 33c2e7c4
    function hexp(uint256 i, uint256 j) external pure returns (bool);
    // Selector: bbd1d251
    function incinerate() external;
    // Selector: 06fdde03
    function name() external view returns (string memory);
    // Selector: e41ab43c
    function neighborsp(uint256 i1, uint256 j1, uint256 i2, uint256 j2) external pure returns (bool);
    // Selector: 95d89b41
    function symbol() external view returns (string memory);
    // Selector: 18160ddd
    function totalSupply() external view returns (uint256);
    // Selector: a9059cbb
    function transfer(address to, uint256 value) external returns (bool);
    // Selector: 23b872dd
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    // errors
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
    error ERC20InvalidApprover(address approver);
    error ERC20InvalidReceiver(address receiver);
    error ERC20InvalidSender(address sender);
    error ERC20InvalidSpender(address spender);
}

/*
 * To regenerate this interface, run the following commands from the project root directory:
 * $ forge build
 * $ jq .abi out/JackpotJunction.sol/JackpotJunction.json | solface -annotations -name IJackpotJunction
 */
// Interface generated by solface: https://github.com/moonstream-to/solface
// solface version: 0.2.3
// Interface ID: 8a4933a8
interface IJackpotJunction {
	// structs

	// events
	event ApprovalForAll(address account, address operator, bool approved);
	event Award(address player, uint256 outcome, uint256 value);
	event Roll(address player);
	event TierUnlocked(uint256 itemType, uint256 terrainType, uint256 tier, uint256 poolID);
	event TransferBatch(address operator, address from, address to, uint256[] ids, uint256[] values);
	event TransferSingle(address operator, address from, address to, uint256 id, uint256 value);
	event URI(string value, uint256 id);

	// functions
	// Selector: be59cce3
	function BlocksToAct() external view returns (uint256);
	// Selector: b870fe80
	function CostToReroll() external view returns (uint256);
	// Selector: 50b8aa92
	function CostToRoll() external view returns (uint256);
	// Selector: dd88fa7f
	function CurrentTier(uint256 , uint256 ) external view returns (uint256);
	// Selector: 44dcd143
	function EquippedBeasts(address ) external view returns (uint256);
	// Selector: 010c9b6e
	function EquippedBody(address ) external view returns (uint256);
	// Selector: e32d5690
	function EquippedCover(address ) external view returns (uint256);
	// Selector: cdf2f0ec
	function EquippedWheels(address ) external view returns (uint256);
	// Selector: 18ce0a4b
	function ImprovedOutcomesCumulativeMass(uint256 ) external view returns (uint256);
	// Selector: 9a0facc2
	function LastRollBlock(address ) external view returns (uint256);
	// Selector: 418145cf
	function UnmodifiedOutcomesCumulativeMass(uint256 ) external view returns (uint256);
	// Selector: 2852b71c
	function accept() external  returns (uint256, uint256, uint256);
	// Selector: 00fdd58e
	function balanceOf(address account, uint256 id) external view returns (uint256);
	// Selector: 4e1273f4
	function balanceOfBatch(address[] memory accounts, uint256[] memory ids) external view returns (uint256[] memory);
	// Selector: b390c0ab
	function burn(uint256 poolID, uint256 amount) external ;
	// Selector: 83ca4b6f
	function burnBatch(uint256[] memory poolIDs, uint256[] memory amounts) external ;
	// Selector: 289137a1
	function craft(uint256 poolID, uint256 numOutputs) external  returns (uint256 newPoolID);
	// Selector: 03f2f420
	function equip(uint256[] memory poolIDs) external ;
	// Selector: 3a134f78
	function genera(uint256 poolID) external pure returns (uint256 itemType, uint256 terrainType, uint256 tier);
	// Selector: b8f905c8
	function hasBonus(address degenerate) external view returns (bool bonus);
	// Selector: e985e9c5
	function isApprovedForAll(address account, address operator) external view returns (bool);
	// Selector: 3a259e6a
	function outcome(address degenerate, bool bonus) external view returns (uint256, uint256, uint256);
	// Selector: cd5e3c5d
	function roll() external ;
	// Selector: 2eb2c2d6
	function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) external ;
	// Selector: f242432a
	function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) external ;
	// Selector: ecefbad8
	function sampleImprovedOutcomesCumulativeMass(uint256 entropy) external view returns (uint256);
	// Selector: 6c08995d
	function sampleUnmodifiedOutcomeCumulativeMass(uint256 entropy) external view returns (uint256);
	// Selector: a22cb465
	function setApprovalForAll(address operator, bool approved) external ;
	// Selector: 01ffc9a7
	function supportsInterface(bytes4 interfaceId) external view returns (bool);
	// Selector: b9c2edf7
	function unequip() external ;
	// Selector: 0e89341c
	function uri(uint256 ) external view returns (string memory);

	// errors
	error DeadlineExceeded();
	error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);
	error ERC1155InvalidApprover(address approver);
	error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
	error ERC1155InvalidOperator(address operator);
	error ERC1155InvalidReceiver(address receiver);
	error ERC1155InvalidSender(address sender);
	error ERC1155MissingApprovalForAll(address operator, address owner);
	error InsufficientItems(uint256 poolID);
	error InsufficientValue();
	error InvalidItem(uint256 poolID);
	error ReentrancyGuardReentrantCall();
	error RollInProgress();
	error WaitForTick();
}
