// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.3
// seer command: seer evm generate --package JackpotJunction --cli --foundry out/JackpotJunction.sol/JackpotJunction.json --struct JackpotJunction --output bindings/JackpotJunction/JackpotJunction.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package JackpotJunction

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// JackpotJunctionMetaData contains all meta data concerning the JackpotJunction contract.
var JackpotJunctionMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"blocksToAct\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"costToRoll\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"costToReroll\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"BlocksToAct\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"CostToReroll\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"CostToRoll\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"CurrentTier\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"EquippedBeasts\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"EquippedBody\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"EquippedCover\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"EquippedWheels\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ImprovedOutcomesCumulativeMass\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"LastRollBlock\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"UnmodifiedOutcomesCumulativeMass\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"accept\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"balanceOfBatch\",\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"poolID\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"burnBatch\",\"inputs\":[{\"name\":\"poolIDs\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"craft\",\"inputs\":[{\"name\":\"poolID\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numOutputs\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"newPoolID\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"currentRewards\",\"inputs\":[],\"outputs\":[{\"name\":\"small\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"medium\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"large\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"equip\",\"inputs\":[{\"name\":\"poolIDs\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"genera\",\"inputs\":[{\"name\":\"poolID\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"itemType\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"terrainType\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"tier\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"hasBonus\",\"inputs\":[{\"name\":\"degenerate\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"bonus\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isApprovedForAll\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"onERC1155BatchReceived\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"onERC1155Received\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"outcome\",\"inputs\":[{\"name\":\"degenerate\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"bonus\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"poolMetadata\",\"inputs\":[{\"name\":\"poolID\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"json\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"roll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"safeBatchTransferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"values\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"safeTransferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"sampleImprovedOutcomesCumulativeMass\",\"inputs\":[{\"name\":\"entropy\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sampleUnmodifiedOutcomeCumulativeMass\",\"inputs\":[{\"name\":\"entropy\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setApprovalForAll\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"unequip\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"uri\",\"inputs\":[{\"name\":\"poolID\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"pure\"},{\"type\":\"event\",\"name\":\"ApprovalForAll\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Award\",\"inputs\":[{\"name\":\"player\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"outcome\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Roll\",\"inputs\":[{\"name\":\"player\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TierUnlocked\",\"inputs\":[{\"name\":\"itemType\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"terrainType\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"tier\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"poolID\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TransferBatch\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"},{\"name\":\"values\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TransferSingle\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"URI\",\"inputs\":[{\"name\":\"value\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"id\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"DeadlineExceeded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ERC1155InsufficientBalance\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC1155InvalidApprover\",\"inputs\":[{\"name\":\"approver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC1155InvalidArrayLength\",\"inputs\":[{\"name\":\"idsLength\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"valuesLength\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC1155InvalidOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC1155InvalidReceiver\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC1155InvalidSender\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC1155MissingApprovalForAll\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"InsufficientItems\",\"inputs\":[{\"name\":\"poolID\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"InsufficientValue\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidItem\",\"inputs\":[{\"name\":\"poolID\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"RollInProgress\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"WaitForTick\",\"inputs\":[]}]",
	Bin: "0x610120604052620800006080908152620e3d6660a052620fd6ff60c052620ffff660e05262100000610100526200003b9060049060056200019e565b506040805160a081018252620729238152620d66896020820152620fc37291810191909152620ffff16060820152621000006080820152620000829060099060056200019e565b503480156200009057600080fd5b50604051620031d8380380620031d8833981016040819052620000b391620001ff565b6040518060600160405280602c8152602001620031ac602c9139620000d8816200018c565b506001600355600e8390556010829055601181905560005b6004811015620001825760005b60078110156200016c57600081837f4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629816200013a84600462000244565b62000146919062000264565b60405190815260200160405180910390a48062000163816200027a565b915050620000fd565b508062000179816200027a565b915050620000f0565b5050505062000407565b60026200019a82826200033b565b5050565b8260058101928215620001d6579160200282015b82811115620001d6578251829062ffffff16905591602001919060010190620001b2565b50620001e4929150620001e8565b5090565b5b80821115620001e45760008155600101620001e9565b6000806000606084860312156200021557600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200025e576200025e6200022e565b92915050565b808201808211156200025e576200025e6200022e565b6000600182016200028f576200028f6200022e565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002c157607f821691505b602082108103620002e257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033657600081815260208120601f850160051c81016020861015620003115750805b601f850160051c820191505b8181101562000332578281556001016200031d565b5050505b505050565b81516001600160401b0381111562000357576200035762000296565b6200036f81620003688454620002ac565b84620002e8565b602080601f831160018114620003a757600084156200038e5750858301515b600019600386901b1c1916600185901b17855562000332565b600085815260208120601f198616915b82811015620003d857888601518255948401946001909101908401620003b7565b5085821015620003f75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612d9580620004176000396000f3fe6080604052600436106102075760003560e01c80638534fb4611610118578063be59cce3116100a0578063e32d56901161006f578063e32d569014610647578063e985e9c514610674578063ecefbad814610694578063f23a6e61146106b4578063f242432a146106e057600080fd5b8063be59cce3146105c4578063cd5e3c5d146105da578063cdf2f0ec146105e2578063dd88fa7f1461060f57600080fd5b8063b390c0ab116100e7578063b390c0ab14610514578063b870fe8014610534578063b8f905c81461054a578063b9c2edf71461056a578063bc197c811461057f57600080fd5b80638534fb4614610492578063901a7d53146104b25780639a0facc2146104c7578063a22cb465146104f457600080fd5b80632eb2c2d61161019b57806344dcd1431161016a57806344dcd143146103e25780634e1273f41461040f57806350b8aa921461043c5780636c08995d1461045257806383ca4b6f1461047257600080fd5b80632eb2c2d6146103625780633a134f78146103825780633a259e6a146103a2578063418145cf146103c257600080fd5b80630e89341c116101d75780630e89341c146102c557806318ce0a4b146102f25780632852b71c14610312578063289137a11461034257600080fd5b8062fdd58e14610213578063010c9b6e1461024657806301ffc9a71461027357806303f2f420146102a357600080fd5b3661020e57005b600080fd5b34801561021f57600080fd5b5061023361022e36600461231d565b610700565b6040519081526020015b60405180910390f35b34801561025257600080fd5b50610233610261366004612347565b60146020526000908152604090205481565b34801561027f57600080fd5b5061029361028e36600461237f565b610728565b604051901515815260200161023d565b3480156102af57600080fd5b506102c36102be36600461239c565b610791565b005b3480156102d157600080fd5b506102e56102e0366004612411565b610afa565b60405161023d919061247a565b3480156102fe57600080fd5b5061023361030d366004612411565b610b33565b34801561031e57600080fd5b50610327610b4a565b6040805193845260208401929092529082015260600161023d565b34801561034e57600080fd5b5061023361035d36600461248d565b610ba4565b34801561036e57600080fd5b506102c361037d3660046125f5565b610cba565b34801561038e57600080fd5b5061032761039d366004612411565b610d21565b3480156103ae57600080fd5b506103276103bd36600461269f565b610d5e565b3480156103ce57600080fd5b506102336103dd366004612411565b610ec9565b3480156103ee57600080fd5b506102336103fd366004612347565b60166020526000908152604090205481565b34801561041b57600080fd5b5061042f61042a3660046126db565b610ed9565b60405161023d91906127d6565b34801561044857600080fd5b5061023360105481565b34801561045e57600080fd5b5061023361046d366004612411565b610fae565b34801561047e57600080fd5b506102c361048d3660046127e9565b611011565b34801561049e57600080fd5b506102e56104ad366004612411565b61101c565b3480156104be57600080fd5b506103276112a2565b3480156104d357600080fd5b506102336104e2366004612347565b600f6020526000908152604090205481565b34801561050057600080fd5b506102c361050f36600461269f565b6112df565b34801561052057600080fd5b506102c361052f36600461248d565b6112ea565b34801561054057600080fd5b5061023360115481565b34801561055657600080fd5b50610293610565366004612347565b6112f5565b34801561057657600080fd5b506102c36114b2565b34801561058b57600080fd5b506105ab61059a3660046125f5565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161023d565b3480156105d057600080fd5b50610233600e5481565b6102c3611654565b3480156105ee57600080fd5b506102336105fd366004612347565b60156020526000908152604090205481565b34801561061b57600080fd5b5061023361062a36600461248d565b601260209081526000928352604080842090915290825290205481565b34801561065357600080fd5b50610233610662366004612347565b60136020526000908152604090205481565b34801561068057600080fd5b5061029361068f366004612836565b6116db565b3480156106a057600080fd5b506102336106af366004612411565b611709565b3480156106c057600080fd5b506105ab6106cf366004612869565b63f23a6e6160e01b95945050505050565b3480156106ec57600080fd5b506102c36106fb366004612869565b611755565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006301ffc9a760e01b6001600160e01b0319831614806107595750636cdb3d1360e11b6001600160e01b03198316145b806107745750630271189760e51b6001600160e01b03198316145b806107225750506001600160e01b03191663188d442960e31b1490565b6107996117b4565b6107a2336117de565b60005b81811015610aeb5760006107d08484848181106107c4576107c46128ce565b90506020020135610d21565b505090508060000361089c57336000908152601360205260408120541561082c573360009081526013602052604090205461080d906001906128fa565b905061082c303383600160405180602001604052806000815250611826565b6108613330878787818110610843576108436128ce565b90506020020135600160405180602001604052806000815250611826565b848484818110610873576108736128ce565b905060200201356001610886919061290d565b3360009081526013602052604090205550610ad8565b806001036109465733600090815260146020526040812054156108f457336000908152601460205260409020546108d5906001906128fa565b90506108f4303383600160405180602001604052806000815250611826565b61090b3330878787818110610843576108436128ce565b84848481811061091d5761091d6128ce565b905060200201356001610930919061290d565b3360009081526014602052604090205550610ad8565b806002036109f057336000908152601560205260408120541561099e573360009081526015602052604090205461097f906001906128fa565b905061099e303383600160405180602001604052806000815250611826565b6109b53330878787818110610843576108436128ce565b8484848181106109c7576109c76128ce565b9050602002013560016109da919061290d565b3360009081526015602052604090205550610ad8565b80600303610a9a573360009081526016602052604081205415610a485733600090815260166020526040902054610a29906001906128fa565b9050610a48303383600160405180602001604052806000815250611826565b610a5f3330878787818110610843576108436128ce565b848484818110610a7157610a716128ce565b905060200201356001610a84919061290d565b3360009081526016602052604090205550610ad8565b838383818110610aac57610aac6128ce565b90506020020135604051633d39bacf60e11b8152600401610acf91815260200190565b60405180910390fd5b5080610ae381612920565b9150506107a5565b50610af66001600355565b5050565b6060610b0d610b088361101c565b6118b4565b604051602001610b1d9190612955565b6040516020818303038152906040529050919050565b60098160058110610b4357600080fd5b0154905081565b6000806000610b576117b4565b6000806000610b69336103bd336112f5565b925092509250610b798282611a14565b610b8e336000908152600f6020526040812055565b91945092509050610b9f6001600355565b909192565b6000610bae6117b4565b610bb982600261299a565b610bc33385610700565b1015610be557604051633bf0eca360e21b815260048101849052602401610acf565b610bf083601c61290d565b9050610c073384610c0285600261299a565b611ac6565b610c2233828460405180602001604052806000815250611b35565b6000806000610c3084610d21565b60008381526012602090815260408083208584529091529020549295509093509150811115610cad57600083815260126020908152604080832085845282529182902083905590518581528291849186917f4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629910160405180910390a45b5050506107226001600355565b336001600160a01b0386168114801590610cdb5750610cd986826116db565b155b15610d0c5760405163711bec9160e11b81526001600160a01b03808316600483015287166024820152604401610acf565b610d198686868686611b92565b505050505050565b60008080610d30601c856129c7565b90506004610d3f601c866129db565b610d4991906129c7565b9150610d566004856129db565b949193509150565b6001600160a01b0382166000908152600f6020526040812054819081904311610d9a5760405163bfc2936d60e01b815260040160405180910390fd5b610da385611bf2565b6001600160a01b0385166000818152600f6020908152604080832054815190408184015280820194909452805180850382018152606090940190528251920191909120908515610dfd57610df682611709565b9050610e09565b610e0682610fae565b90505b600081600103610e69576000610e3560076e3fffffffffffffffffffffffffffff601487901c166129db565b90506000610e486004608a87901c6129db565b905080610e5683600461299a565b610e60919061290d565b92505050610ebb565b81600203610e9b57601054610e8390600181901c9061290d565b90504760061c811115610e9657504760061c5b610ebb565b81600303610ead57504760061c610ebb565b81600403610ebb57504760011c5b919450925090509250925092565b60048160058110610b4357600080fd5b60608151835114610f0a5781518351604051635b05999160e01b815260048101929092526024820152604401610acf565b6000835167ffffffffffffffff811115610f2657610f266124af565b604051908082528060200260200182016040528015610f4f578160200160208202803683370190505b50905060005b8451811015610fa657602080820286010151610f7990602080840287010151610700565b828281518110610f8b57610f8b6128ce565b6020908102919091010152610f9f81612920565b9050610f55565b509392505050565b6000620fffff82166004820154811015610fcb5750600092915050565b600554811015610fde5750600192915050565b600654811015610ff15750600292915050565b600460035b01548110156110085750600392915050565b50600492915050565b610af6338383611c38565b6060600080600061102c85610d21565b925092509250600061103d82611c83565b60405160200161104d91906129ef565b60405160208183030381529060405290506060808460000361108f5760405180604001604052806006815260200165706c61696e7360d01b815250915061119c565b846001036110bd5760405180604001604052806006815260200165199bdc995cdd60d21b815250915061119c565b846002036110ea576040518060400160405280600581526020016407377616d760dc1b815250915061119c565b8460030361111757604051806040016040528060058152602001643bb0ba32b960d91b815250915061119c565b84600403611147576040518060400160405280600881526020016736b7bab73a30b4b760c11b815250915061119c565b84600503611175576040518060400160405280600681526020016519195cd95c9d60d21b815250915061119c565b8460060361119c576040518060400160405280600381526020016269636560e81b81525091505b856000036111c6575060408051808201909152600581526431b7bb32b960d91b6020820152611241565b856001036111ef5750604080518082019091526004815263626f647960e01b6020820152611241565b8560020361121a5750604080518082019091526006815265776865656c7360d01b6020820152611241565b85600303611241575060408051808201909152600681526562656173747360d01b60208201525b82828260405160200161125693929190612a1c565b60405160208183030381529060405292508261127185611c83565b83836040516020016112869493929190612a76565b6040516020818303038152906040529650505050505050919050565b60008060006001601054901c6010546112bb919061290d565b92504760061c8311156112cf574760061c92505b5090914760061c91504760011c90565b610af6338383611d16565b610af6338383611ac6565b6001600160a01b03811660009081526013602090815260408083205460148352818420546015845282852054601690945291842054909290831580159061133b57508215155b801561134657508115155b801561135157508015155b156114a9578361136081612c26565b945050828061136e90612c26565b935050818061137c90612c26565b925050808061138a90612c26565b91505060008060008061139c88610d21565b6000838152601260209081526040808320858452909152902054929550935091508290036113c957600198505b8093508815611414576113db87610d21565b6000838152601260209081526040808320858452909152902054929550935091508214158061140a5750838114155b1561141457600098505b881561145c5761142386610d21565b600083815260126020908152604080832085845290915290205492955093509150821415806114525750838114155b1561145c57600098505b88156114a45761146b85610d21565b6000838152601260209081526040808320858452909152902054929550935091508214158061149a5750838114155b156114a457600098505b505050505b50505050919050565b6114ba6117b4565b6114c3336117de565b336000908152601360205260408120541561152457336000908152601360205260409020546114f4906001906128fa565b9050611513303383600160405180602001604052806000815250611826565b336000908152601360205260408120555b33600090815260146020526040902054156115855733600090815260146020526040902054611555906001906128fa565b9050611574303383600160405180602001604052806000815250611826565b336000908152601460205260408120555b33600090815260156020526040902054156115e657336000908152601560205260409020546115b6906001906128fa565b90506115d5303383600160405180602001604052806000815250611826565b336000908152601560205260408120555b33600090815260166020526040902054156116475733600090815260166020526040902054611617906001906128fa565b9050611636303383600160405180602001604052806000815250611826565b336000908152601660205260408120555b506116526001600355565b565b601054600e54336000908152600f6020526040902054611674919061290d565b431161167f57506011545b803410156116a05760405163044044a560e21b815260040160405180910390fd5b336000818152600f6020526040808220439055517f663b85167cccb9640fb0a935c4853ea50b0f3dd07d2590ca19942153136cef569190a250565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6000620fffff821660098201548110156117265750600092915050565b600a548110156117395750600192915050565b600b5481101561174c5750600292915050565b60096003610ff6565b336001600160a01b0386168114801590611776575061177486826116db565b155b156117a75760405163711bec9160e11b81526001600160a01b03808316600483015287166024820152604401610acf565b610d198686868686611826565b6002600354036117d757604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b600e546001600160a01b0382166000908152600f6020526040902054611804919061290d565b43116118235760405163411931ff60e01b815260040160405180910390fd5b50565b6001600160a01b03841661185057604051632bfa23e760e11b815260006004820152602401610acf565b6001600160a01b03851661187957604051626a0d4560e21b815260006004820152602401610acf565b604080516001808252602082018690528183019081526060820185905260808201909252906118ab8787848487611dac565b50505050505050565b606081516000036118d357505060408051602081019091526000815290565b6000604051806060016040528060408152602001612d206040913990506000600384516002611902919061290d565b61190c91906129c7565b61191790600461299a565b67ffffffffffffffff81111561192f5761192f6124af565b6040519080825280601f01601f191660200182016040528015611959576020820181803683370190505b50905060018201602082018586518701602081018051600082525b828410156119cf576003840193508351603f8160121c168701518653600186019550603f81600c1c168701518653600186019550603f8160061c168701518653600186019550603f8116870151865350600185019450611974565b90525050855160039006600181146119ee5760028114611a0157611a09565b603d6001830353603d6002830353611a09565b603d60018303535b509195945050505050565b81600103611a3d57611a383382600160405180602001604052806000815250611b35565b611a8b565b8160021480611a4c5750816003145b80611a575750816004145b15611a8b57604051339082156108fc029083906000818181858888f19350505050158015611a89573d6000803e3d6000fd5b505b604051818152829033907f1187560d7b166b3122e71aedb88f19cf2f33b2d141b513fde3ca2562d19d1bcb9060200160405180910390a35050565b6001600160a01b038316611aef57604051626a0d4560e21b815260006004820152602401610acf565b604080516001808252602082018590528183019081526060820184905260a08201909252600060808201818152919291611b2e91879185908590611dac565b5050505050565b6001600160a01b038416611b5f57604051632bfa23e760e11b815260006004820152602401610acf565b60408051600180825260208201869052818301908152606082018590526080820190925290610d19600087848487611dac565b6001600160a01b038416611bbc57604051632bfa23e760e11b815260006004820152602401610acf565b6001600160a01b038516611be557604051626a0d4560e21b815260006004820152602401610acf565b611b2e8585858585611dac565b600e546001600160a01b0382166000908152600f6020526040902054611c18919061290d565b4311156118235760405163559895a360e01b815260040160405180910390fd5b6001600160a01b038316611c6157604051626a0d4560e21b815260006004820152602401610acf565b611c7e836000848460405180602001604052806000815250611dac565b505050565b60606000611c9083611dff565b600101905060008167ffffffffffffffff811115611cb057611cb06124af565b6040519080825280601f01601f191660200182016040528015611cda576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611ce457509392505050565b6001600160a01b038216611d3f5760405162ced3e160e81b815260006004820152602401610acf565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611db885858585611ed7565b6001600160a01b03841615611b2e5782513390600103611df15760208481015190840151611dea8389898585896120f4565b5050610d19565b610d19818787878787612218565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611e3e5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611e6a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611e8857662386f26fc10000830492506010015b6305f5e1008310611ea0576305f5e100830492506008015b6127108310611eb457612710830492506004015b60648310611ec6576064830492506002015b600a83106107225760010192915050565b8051825114611f065781518151604051635b05999160e01b815260048101929092526024820152604401610acf565b3360005b8351811015612015576020818102858101820151908501909101516001600160a01b03881615611fbd576000828152602081815260408083206001600160a01b038c16845290915290205481811015611f96576040516303dee4c560e01b81526001600160a01b038a166004820152602481018290526044810183905260648101849052608401610acf565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615612002576000828152602081815260408083206001600160a01b038b16845290915281208054839290611ffc90849061290d565b90915550505b50508061200e90612920565b9050611f0a565b5082516001036120965760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612087929190918252602082015260400190565b60405180910390a45050611b2e565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516120e5929190612c3d565b60405180910390a45050505050565b6001600160a01b0384163b15610d195760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906121389089908990889088908890600401612c6b565b6020604051808303816000875af1925050508015612173575060408051601f3d908101601f1916820190925261217091810190612cb0565b60015b6121dc573d8080156121a1576040519150601f19603f3d011682016040523d82523d6000602084013e6121a6565b606091505b5080516000036121d457604051632bfa23e760e11b81526001600160a01b0386166004820152602401610acf565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b146118ab57604051632bfa23e760e11b81526001600160a01b0386166004820152602401610acf565b6001600160a01b0384163b15610d195760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061225c9089908990889088908890600401612ccd565b6020604051808303816000875af1925050508015612297575060408051601f3d908101601f1916820190925261229491810190612cb0565b60015b6122c5573d8080156121a1576040519150601f19603f3d011682016040523d82523d6000602084013e6121a6565b6001600160e01b0319811663bc197c8160e01b146118ab57604051632bfa23e760e11b81526001600160a01b0386166004820152602401610acf565b80356001600160a01b038116811461231857600080fd5b919050565b6000806040838503121561233057600080fd5b61233983612301565b946020939093013593505050565b60006020828403121561235957600080fd5b61236282612301565b9392505050565b6001600160e01b03198116811461182357600080fd5b60006020828403121561239157600080fd5b813561236281612369565b600080602083850312156123af57600080fd5b823567ffffffffffffffff808211156123c757600080fd5b818501915085601f8301126123db57600080fd5b8135818111156123ea57600080fd5b8660208260051b85010111156123ff57600080fd5b60209290920196919550909350505050565b60006020828403121561242357600080fd5b5035919050565b60005b8381101561244557818101518382015260200161242d565b50506000910152565b6000815180845261246681602086016020860161242a565b601f01601f19169290920160200192915050565b602081526000612362602083018461244e565b600080604083850312156124a057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156124ee576124ee6124af565b604052919050565b600067ffffffffffffffff821115612510576125106124af565b5060051b60200190565b600082601f83011261252b57600080fd5b8135602061254061253b836124f6565b6124c5565b82815260059290921b8401810191818101908684111561255f57600080fd5b8286015b8481101561257a5780358352918301918301612563565b509695505050505050565b600082601f83011261259657600080fd5b813567ffffffffffffffff8111156125b0576125b06124af565b6125c3601f8201601f19166020016124c5565b8181528460208386010111156125d857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561260d57600080fd5b61261686612301565b945061262460208701612301565b9350604086013567ffffffffffffffff8082111561264157600080fd5b61264d89838a0161251a565b9450606088013591508082111561266357600080fd5b61266f89838a0161251a565b9350608088013591508082111561268557600080fd5b5061269288828901612585565b9150509295509295909350565b600080604083850312156126b257600080fd5b6126bb83612301565b9150602083013580151581146126d057600080fd5b809150509250929050565b600080604083850312156126ee57600080fd5b823567ffffffffffffffff8082111561270657600080fd5b818501915085601f83011261271a57600080fd5b8135602061272a61253b836124f6565b82815260059290921b8401810191818101908984111561274957600080fd5b948201945b8386101561276e5761275f86612301565b8252948201949082019061274e565b9650508601359250508082111561278457600080fd5b506127918582860161251a565b9150509250929050565b600081518084526020808501945080840160005b838110156127cb578151875295820195908201906001016127af565b509495945050505050565b602081526000612362602083018461279b565b600080604083850312156127fc57600080fd5b823567ffffffffffffffff8082111561281457600080fd5b6128208683870161251a565b9350602085013591508082111561278457600080fd5b6000806040838503121561284957600080fd5b61285283612301565b915061286060208401612301565b90509250929050565b600080600080600060a0868803121561288157600080fd5b61288a86612301565b945061289860208701612301565b93506040860135925060608601359150608086013567ffffffffffffffff8111156128c257600080fd5b61269288828901612585565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610722576107226128e4565b80820180821115610722576107226128e4565b600060018201612932576129326128e4565b5060010190565b6000815161294b81856020860161242a565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161298d81601d85016020870161242a565b91909101601d0192915050565b8082028115828204841417610722576107226128e4565b634e487b7160e01b600052601260045260246000fd5b6000826129d6576129d66129b1565b500490565b6000826129ea576129ea6129b1565b500690565b6402a34b2b9160dd1b815260008251612a0f81600585016020870161242a565b9190910160050192915050565b60008451612a2e81846020890161242a565b8083019050600160fd1b8082528551612a4e816001850160208a0161242a565b60019201918201528351612a6981600284016020880161242a565b0160020195945050505050565b693d913730b6b2911d101160b11b81528451600090612a9c81600a850160208a0161242a565b7f222c2022646563696d616c73223a20302c202261747472696275746573223a20600a918401918201527f5b7b2274726169745f74797065223a202274696572222c2022646973706c6179602a8201527f5f74797065223a20226e756d626572222c202276616c7565223a202200000000604a8201528551612b25816066840160208a0161242a565b7f227d2c207b2274726169745f74797065223a20227465727261696e5f74797065606692909101918201527f222c2022646973706c61795f74797065223a2022737472696e67222c20227661608682015266363ab2911d101160c91b60a68201528451612b998160ad84016020890161242a565b612c1a612c0a612c0460ad848601017f227d2c207b2274726169745f74797065223a20226974656d5f74797065222c2081527f22646973706c61795f74797065223a2022737472696e67222c202276616c7565602082015263111d101160e11b604082015260440190565b87612939565b63227d5d7d60e01b815260040190565b98975050505050505050565b600081612c3557612c356128e4565b506000190190565b604081526000612c50604083018561279b565b8281036020840152612c62818561279b565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ca59083018461244e565b979650505050505050565b600060208284031215612cc257600080fd5b815161236281612369565b6001600160a01b0386811682528516602082015260a060408201819052600090612cf99083018661279b565b8281036060840152612d0b818661279b565b90508281036080840152612c1a818561244e56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212203f408e832229cb4b33b560cb5978e922292ada536fbfdab858c45fd3c458866964736f6c6343000814003368747470733a2f2f6769746875622e636f6d2f6d6f6f6e73747265616d2d746f2f646567656e2d747261696c",
}

// JackpotJunctionABI is the input ABI used to generate the binding from.
// Deprecated: Use JackpotJunctionMetaData.ABI instead.
var JackpotJunctionABI = JackpotJunctionMetaData.ABI

// JackpotJunctionBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use JackpotJunctionMetaData.Bin instead.
var JackpotJunctionBin = JackpotJunctionMetaData.Bin

// DeployJackpotJunction deploys a new Ethereum contract, binding an instance of JackpotJunction to it.
func DeployJackpotJunction(auth *bind.TransactOpts, backend bind.ContractBackend, blocksToAct *big.Int, costToRoll *big.Int, costToReroll *big.Int) (common.Address, *types.Transaction, *JackpotJunction, error) {
	parsed, err := JackpotJunctionMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(JackpotJunctionBin), backend, blocksToAct, costToRoll, costToReroll)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &JackpotJunction{JackpotJunctionCaller: JackpotJunctionCaller{contract: contract}, JackpotJunctionTransactor: JackpotJunctionTransactor{contract: contract}, JackpotJunctionFilterer: JackpotJunctionFilterer{contract: contract}}, nil
}

// JackpotJunction is an auto generated Go binding around an Ethereum contract.
type JackpotJunction struct {
	JackpotJunctionCaller     // Read-only binding to the contract
	JackpotJunctionTransactor // Write-only binding to the contract
	JackpotJunctionFilterer   // Log filterer for contract events
}

// JackpotJunctionCaller is an auto generated read-only Go binding around an Ethereum contract.
type JackpotJunctionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// JackpotJunctionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type JackpotJunctionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// JackpotJunctionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type JackpotJunctionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// JackpotJunctionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type JackpotJunctionSession struct {
	Contract     *JackpotJunction  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// JackpotJunctionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type JackpotJunctionCallerSession struct {
	Contract *JackpotJunctionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// JackpotJunctionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type JackpotJunctionTransactorSession struct {
	Contract     *JackpotJunctionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// JackpotJunctionRaw is an auto generated low-level Go binding around an Ethereum contract.
type JackpotJunctionRaw struct {
	Contract *JackpotJunction // Generic contract binding to access the raw methods on
}

// JackpotJunctionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type JackpotJunctionCallerRaw struct {
	Contract *JackpotJunctionCaller // Generic read-only contract binding to access the raw methods on
}

// JackpotJunctionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type JackpotJunctionTransactorRaw struct {
	Contract *JackpotJunctionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewJackpotJunction creates a new instance of JackpotJunction, bound to a specific deployed contract.
func NewJackpotJunction(address common.Address, backend bind.ContractBackend) (*JackpotJunction, error) {
	contract, err := bindJackpotJunction(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &JackpotJunction{JackpotJunctionCaller: JackpotJunctionCaller{contract: contract}, JackpotJunctionTransactor: JackpotJunctionTransactor{contract: contract}, JackpotJunctionFilterer: JackpotJunctionFilterer{contract: contract}}, nil
}

// NewJackpotJunctionCaller creates a new read-only instance of JackpotJunction, bound to a specific deployed contract.
func NewJackpotJunctionCaller(address common.Address, caller bind.ContractCaller) (*JackpotJunctionCaller, error) {
	contract, err := bindJackpotJunction(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &JackpotJunctionCaller{contract: contract}, nil
}

// NewJackpotJunctionTransactor creates a new write-only instance of JackpotJunction, bound to a specific deployed contract.
func NewJackpotJunctionTransactor(address common.Address, transactor bind.ContractTransactor) (*JackpotJunctionTransactor, error) {
	contract, err := bindJackpotJunction(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &JackpotJunctionTransactor{contract: contract}, nil
}

// NewJackpotJunctionFilterer creates a new log filterer instance of JackpotJunction, bound to a specific deployed contract.
func NewJackpotJunctionFilterer(address common.Address, filterer bind.ContractFilterer) (*JackpotJunctionFilterer, error) {
	contract, err := bindJackpotJunction(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &JackpotJunctionFilterer{contract: contract}, nil
}

// bindJackpotJunction binds a generic wrapper to an already deployed contract.
func bindJackpotJunction(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := JackpotJunctionMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_JackpotJunction *JackpotJunctionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _JackpotJunction.Contract.JackpotJunctionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_JackpotJunction *JackpotJunctionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _JackpotJunction.Contract.JackpotJunctionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_JackpotJunction *JackpotJunctionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _JackpotJunction.Contract.JackpotJunctionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_JackpotJunction *JackpotJunctionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _JackpotJunction.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_JackpotJunction *JackpotJunctionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _JackpotJunction.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_JackpotJunction *JackpotJunctionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _JackpotJunction.Contract.contract.Transact(opts, method, params...)
}

// BlocksToAct is a free data retrieval call binding the contract method 0xbe59cce3.
//
// Solidity: function BlocksToAct() view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) BlocksToAct(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "BlocksToAct")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlocksToAct is a free data retrieval call binding the contract method 0xbe59cce3.
//
// Solidity: function BlocksToAct() view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) BlocksToAct() (*big.Int, error) {
	return _JackpotJunction.Contract.BlocksToAct(&_JackpotJunction.CallOpts)
}

// BlocksToAct is a free data retrieval call binding the contract method 0xbe59cce3.
//
// Solidity: function BlocksToAct() view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) BlocksToAct() (*big.Int, error) {
	return _JackpotJunction.Contract.BlocksToAct(&_JackpotJunction.CallOpts)
}

// CostToReroll is a free data retrieval call binding the contract method 0xb870fe80.
//
// Solidity: function CostToReroll() view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) CostToReroll(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "CostToReroll")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CostToReroll is a free data retrieval call binding the contract method 0xb870fe80.
//
// Solidity: function CostToReroll() view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) CostToReroll() (*big.Int, error) {
	return _JackpotJunction.Contract.CostToReroll(&_JackpotJunction.CallOpts)
}

// CostToReroll is a free data retrieval call binding the contract method 0xb870fe80.
//
// Solidity: function CostToReroll() view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) CostToReroll() (*big.Int, error) {
	return _JackpotJunction.Contract.CostToReroll(&_JackpotJunction.CallOpts)
}

// CostToRoll is a free data retrieval call binding the contract method 0x50b8aa92.
//
// Solidity: function CostToRoll() view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) CostToRoll(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "CostToRoll")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CostToRoll is a free data retrieval call binding the contract method 0x50b8aa92.
//
// Solidity: function CostToRoll() view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) CostToRoll() (*big.Int, error) {
	return _JackpotJunction.Contract.CostToRoll(&_JackpotJunction.CallOpts)
}

// CostToRoll is a free data retrieval call binding the contract method 0x50b8aa92.
//
// Solidity: function CostToRoll() view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) CostToRoll() (*big.Int, error) {
	return _JackpotJunction.Contract.CostToRoll(&_JackpotJunction.CallOpts)
}

// CurrentTier is a free data retrieval call binding the contract method 0xdd88fa7f.
//
// Solidity: function CurrentTier(uint256 , uint256 ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) CurrentTier(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "CurrentTier", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentTier is a free data retrieval call binding the contract method 0xdd88fa7f.
//
// Solidity: function CurrentTier(uint256 , uint256 ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) CurrentTier(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.CurrentTier(&_JackpotJunction.CallOpts, arg0, arg1)
}

// CurrentTier is a free data retrieval call binding the contract method 0xdd88fa7f.
//
// Solidity: function CurrentTier(uint256 , uint256 ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) CurrentTier(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.CurrentTier(&_JackpotJunction.CallOpts, arg0, arg1)
}

// EquippedBeasts is a free data retrieval call binding the contract method 0x44dcd143.
//
// Solidity: function EquippedBeasts(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) EquippedBeasts(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "EquippedBeasts", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EquippedBeasts is a free data retrieval call binding the contract method 0x44dcd143.
//
// Solidity: function EquippedBeasts(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) EquippedBeasts(arg0 common.Address) (*big.Int, error) {
	return _JackpotJunction.Contract.EquippedBeasts(&_JackpotJunction.CallOpts, arg0)
}

// EquippedBeasts is a free data retrieval call binding the contract method 0x44dcd143.
//
// Solidity: function EquippedBeasts(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) EquippedBeasts(arg0 common.Address) (*big.Int, error) {
	return _JackpotJunction.Contract.EquippedBeasts(&_JackpotJunction.CallOpts, arg0)
}

// EquippedBody is a free data retrieval call binding the contract method 0x010c9b6e.
//
// Solidity: function EquippedBody(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) EquippedBody(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "EquippedBody", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EquippedBody is a free data retrieval call binding the contract method 0x010c9b6e.
//
// Solidity: function EquippedBody(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) EquippedBody(arg0 common.Address) (*big.Int, error) {
	return _JackpotJunction.Contract.EquippedBody(&_JackpotJunction.CallOpts, arg0)
}

// EquippedBody is a free data retrieval call binding the contract method 0x010c9b6e.
//
// Solidity: function EquippedBody(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) EquippedBody(arg0 common.Address) (*big.Int, error) {
	return _JackpotJunction.Contract.EquippedBody(&_JackpotJunction.CallOpts, arg0)
}

// EquippedCover is a free data retrieval call binding the contract method 0xe32d5690.
//
// Solidity: function EquippedCover(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) EquippedCover(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "EquippedCover", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EquippedCover is a free data retrieval call binding the contract method 0xe32d5690.
//
// Solidity: function EquippedCover(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) EquippedCover(arg0 common.Address) (*big.Int, error) {
	return _JackpotJunction.Contract.EquippedCover(&_JackpotJunction.CallOpts, arg0)
}

// EquippedCover is a free data retrieval call binding the contract method 0xe32d5690.
//
// Solidity: function EquippedCover(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) EquippedCover(arg0 common.Address) (*big.Int, error) {
	return _JackpotJunction.Contract.EquippedCover(&_JackpotJunction.CallOpts, arg0)
}

// EquippedWheels is a free data retrieval call binding the contract method 0xcdf2f0ec.
//
// Solidity: function EquippedWheels(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) EquippedWheels(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "EquippedWheels", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EquippedWheels is a free data retrieval call binding the contract method 0xcdf2f0ec.
//
// Solidity: function EquippedWheels(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) EquippedWheels(arg0 common.Address) (*big.Int, error) {
	return _JackpotJunction.Contract.EquippedWheels(&_JackpotJunction.CallOpts, arg0)
}

// EquippedWheels is a free data retrieval call binding the contract method 0xcdf2f0ec.
//
// Solidity: function EquippedWheels(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) EquippedWheels(arg0 common.Address) (*big.Int, error) {
	return _JackpotJunction.Contract.EquippedWheels(&_JackpotJunction.CallOpts, arg0)
}

// ImprovedOutcomesCumulativeMass is a free data retrieval call binding the contract method 0x18ce0a4b.
//
// Solidity: function ImprovedOutcomesCumulativeMass(uint256 ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) ImprovedOutcomesCumulativeMass(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "ImprovedOutcomesCumulativeMass", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ImprovedOutcomesCumulativeMass is a free data retrieval call binding the contract method 0x18ce0a4b.
//
// Solidity: function ImprovedOutcomesCumulativeMass(uint256 ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) ImprovedOutcomesCumulativeMass(arg0 *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.ImprovedOutcomesCumulativeMass(&_JackpotJunction.CallOpts, arg0)
}

// ImprovedOutcomesCumulativeMass is a free data retrieval call binding the contract method 0x18ce0a4b.
//
// Solidity: function ImprovedOutcomesCumulativeMass(uint256 ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) ImprovedOutcomesCumulativeMass(arg0 *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.ImprovedOutcomesCumulativeMass(&_JackpotJunction.CallOpts, arg0)
}

// LastRollBlock is a free data retrieval call binding the contract method 0x9a0facc2.
//
// Solidity: function LastRollBlock(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) LastRollBlock(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "LastRollBlock", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastRollBlock is a free data retrieval call binding the contract method 0x9a0facc2.
//
// Solidity: function LastRollBlock(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) LastRollBlock(arg0 common.Address) (*big.Int, error) {
	return _JackpotJunction.Contract.LastRollBlock(&_JackpotJunction.CallOpts, arg0)
}

// LastRollBlock is a free data retrieval call binding the contract method 0x9a0facc2.
//
// Solidity: function LastRollBlock(address ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) LastRollBlock(arg0 common.Address) (*big.Int, error) {
	return _JackpotJunction.Contract.LastRollBlock(&_JackpotJunction.CallOpts, arg0)
}

// UnmodifiedOutcomesCumulativeMass is a free data retrieval call binding the contract method 0x418145cf.
//
// Solidity: function UnmodifiedOutcomesCumulativeMass(uint256 ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) UnmodifiedOutcomesCumulativeMass(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "UnmodifiedOutcomesCumulativeMass", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnmodifiedOutcomesCumulativeMass is a free data retrieval call binding the contract method 0x418145cf.
//
// Solidity: function UnmodifiedOutcomesCumulativeMass(uint256 ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) UnmodifiedOutcomesCumulativeMass(arg0 *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.UnmodifiedOutcomesCumulativeMass(&_JackpotJunction.CallOpts, arg0)
}

// UnmodifiedOutcomesCumulativeMass is a free data retrieval call binding the contract method 0x418145cf.
//
// Solidity: function UnmodifiedOutcomesCumulativeMass(uint256 ) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) UnmodifiedOutcomesCumulativeMass(arg0 *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.UnmodifiedOutcomesCumulativeMass(&_JackpotJunction.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.BalanceOf(&_JackpotJunction.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.BalanceOf(&_JackpotJunction.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_JackpotJunction *JackpotJunctionCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_JackpotJunction *JackpotJunctionSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _JackpotJunction.Contract.BalanceOfBatch(&_JackpotJunction.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_JackpotJunction *JackpotJunctionCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _JackpotJunction.Contract.BalanceOfBatch(&_JackpotJunction.CallOpts, accounts, ids)
}

// CurrentRewards is a free data retrieval call binding the contract method 0x901a7d53.
//
// Solidity: function currentRewards() view returns(uint256 small, uint256 medium, uint256 large)
func (_JackpotJunction *JackpotJunctionCaller) CurrentRewards(opts *bind.CallOpts) (struct {
	Small  *big.Int
	Medium *big.Int
	Large  *big.Int
}, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "currentRewards")

	outstruct := new(struct {
		Small  *big.Int
		Medium *big.Int
		Large  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Small = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Medium = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Large = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CurrentRewards is a free data retrieval call binding the contract method 0x901a7d53.
//
// Solidity: function currentRewards() view returns(uint256 small, uint256 medium, uint256 large)
func (_JackpotJunction *JackpotJunctionSession) CurrentRewards() (struct {
	Small  *big.Int
	Medium *big.Int
	Large  *big.Int
}, error) {
	return _JackpotJunction.Contract.CurrentRewards(&_JackpotJunction.CallOpts)
}

// CurrentRewards is a free data retrieval call binding the contract method 0x901a7d53.
//
// Solidity: function currentRewards() view returns(uint256 small, uint256 medium, uint256 large)
func (_JackpotJunction *JackpotJunctionCallerSession) CurrentRewards() (struct {
	Small  *big.Int
	Medium *big.Int
	Large  *big.Int
}, error) {
	return _JackpotJunction.Contract.CurrentRewards(&_JackpotJunction.CallOpts)
}

// Genera is a free data retrieval call binding the contract method 0x3a134f78.
//
// Solidity: function genera(uint256 poolID) pure returns(uint256 itemType, uint256 terrainType, uint256 tier)
func (_JackpotJunction *JackpotJunctionCaller) Genera(opts *bind.CallOpts, poolID *big.Int) (struct {
	ItemType    *big.Int
	TerrainType *big.Int
	Tier        *big.Int
}, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "genera", poolID)

	outstruct := new(struct {
		ItemType    *big.Int
		TerrainType *big.Int
		Tier        *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ItemType = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TerrainType = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Tier = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Genera is a free data retrieval call binding the contract method 0x3a134f78.
//
// Solidity: function genera(uint256 poolID) pure returns(uint256 itemType, uint256 terrainType, uint256 tier)
func (_JackpotJunction *JackpotJunctionSession) Genera(poolID *big.Int) (struct {
	ItemType    *big.Int
	TerrainType *big.Int
	Tier        *big.Int
}, error) {
	return _JackpotJunction.Contract.Genera(&_JackpotJunction.CallOpts, poolID)
}

// Genera is a free data retrieval call binding the contract method 0x3a134f78.
//
// Solidity: function genera(uint256 poolID) pure returns(uint256 itemType, uint256 terrainType, uint256 tier)
func (_JackpotJunction *JackpotJunctionCallerSession) Genera(poolID *big.Int) (struct {
	ItemType    *big.Int
	TerrainType *big.Int
	Tier        *big.Int
}, error) {
	return _JackpotJunction.Contract.Genera(&_JackpotJunction.CallOpts, poolID)
}

// HasBonus is a free data retrieval call binding the contract method 0xb8f905c8.
//
// Solidity: function hasBonus(address degenerate) view returns(bool bonus)
func (_JackpotJunction *JackpotJunctionCaller) HasBonus(opts *bind.CallOpts, degenerate common.Address) (bool, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "hasBonus", degenerate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasBonus is a free data retrieval call binding the contract method 0xb8f905c8.
//
// Solidity: function hasBonus(address degenerate) view returns(bool bonus)
func (_JackpotJunction *JackpotJunctionSession) HasBonus(degenerate common.Address) (bool, error) {
	return _JackpotJunction.Contract.HasBonus(&_JackpotJunction.CallOpts, degenerate)
}

// HasBonus is a free data retrieval call binding the contract method 0xb8f905c8.
//
// Solidity: function hasBonus(address degenerate) view returns(bool bonus)
func (_JackpotJunction *JackpotJunctionCallerSession) HasBonus(degenerate common.Address) (bool, error) {
	return _JackpotJunction.Contract.HasBonus(&_JackpotJunction.CallOpts, degenerate)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_JackpotJunction *JackpotJunctionCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_JackpotJunction *JackpotJunctionSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _JackpotJunction.Contract.IsApprovedForAll(&_JackpotJunction.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_JackpotJunction *JackpotJunctionCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _JackpotJunction.Contract.IsApprovedForAll(&_JackpotJunction.CallOpts, account, operator)
}

// Outcome is a free data retrieval call binding the contract method 0x3a259e6a.
//
// Solidity: function outcome(address degenerate, bool bonus) view returns(uint256, uint256, uint256)
func (_JackpotJunction *JackpotJunctionCaller) Outcome(opts *bind.CallOpts, degenerate common.Address, bonus bool) (*big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "outcome", degenerate, bonus)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// Outcome is a free data retrieval call binding the contract method 0x3a259e6a.
//
// Solidity: function outcome(address degenerate, bool bonus) view returns(uint256, uint256, uint256)
func (_JackpotJunction *JackpotJunctionSession) Outcome(degenerate common.Address, bonus bool) (*big.Int, *big.Int, *big.Int, error) {
	return _JackpotJunction.Contract.Outcome(&_JackpotJunction.CallOpts, degenerate, bonus)
}

// Outcome is a free data retrieval call binding the contract method 0x3a259e6a.
//
// Solidity: function outcome(address degenerate, bool bonus) view returns(uint256, uint256, uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) Outcome(degenerate common.Address, bonus bool) (*big.Int, *big.Int, *big.Int, error) {
	return _JackpotJunction.Contract.Outcome(&_JackpotJunction.CallOpts, degenerate, bonus)
}

// PoolMetadata is a free data retrieval call binding the contract method 0x8534fb46.
//
// Solidity: function poolMetadata(uint256 poolID) pure returns(bytes json)
func (_JackpotJunction *JackpotJunctionCaller) PoolMetadata(opts *bind.CallOpts, poolID *big.Int) ([]byte, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "poolMetadata", poolID)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// PoolMetadata is a free data retrieval call binding the contract method 0x8534fb46.
//
// Solidity: function poolMetadata(uint256 poolID) pure returns(bytes json)
func (_JackpotJunction *JackpotJunctionSession) PoolMetadata(poolID *big.Int) ([]byte, error) {
	return _JackpotJunction.Contract.PoolMetadata(&_JackpotJunction.CallOpts, poolID)
}

// PoolMetadata is a free data retrieval call binding the contract method 0x8534fb46.
//
// Solidity: function poolMetadata(uint256 poolID) pure returns(bytes json)
func (_JackpotJunction *JackpotJunctionCallerSession) PoolMetadata(poolID *big.Int) ([]byte, error) {
	return _JackpotJunction.Contract.PoolMetadata(&_JackpotJunction.CallOpts, poolID)
}

// SampleImprovedOutcomesCumulativeMass is a free data retrieval call binding the contract method 0xecefbad8.
//
// Solidity: function sampleImprovedOutcomesCumulativeMass(uint256 entropy) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) SampleImprovedOutcomesCumulativeMass(opts *bind.CallOpts, entropy *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "sampleImprovedOutcomesCumulativeMass", entropy)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleImprovedOutcomesCumulativeMass is a free data retrieval call binding the contract method 0xecefbad8.
//
// Solidity: function sampleImprovedOutcomesCumulativeMass(uint256 entropy) view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) SampleImprovedOutcomesCumulativeMass(entropy *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.SampleImprovedOutcomesCumulativeMass(&_JackpotJunction.CallOpts, entropy)
}

// SampleImprovedOutcomesCumulativeMass is a free data retrieval call binding the contract method 0xecefbad8.
//
// Solidity: function sampleImprovedOutcomesCumulativeMass(uint256 entropy) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) SampleImprovedOutcomesCumulativeMass(entropy *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.SampleImprovedOutcomesCumulativeMass(&_JackpotJunction.CallOpts, entropy)
}

// SampleUnmodifiedOutcomeCumulativeMass is a free data retrieval call binding the contract method 0x6c08995d.
//
// Solidity: function sampleUnmodifiedOutcomeCumulativeMass(uint256 entropy) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCaller) SampleUnmodifiedOutcomeCumulativeMass(opts *bind.CallOpts, entropy *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "sampleUnmodifiedOutcomeCumulativeMass", entropy)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleUnmodifiedOutcomeCumulativeMass is a free data retrieval call binding the contract method 0x6c08995d.
//
// Solidity: function sampleUnmodifiedOutcomeCumulativeMass(uint256 entropy) view returns(uint256)
func (_JackpotJunction *JackpotJunctionSession) SampleUnmodifiedOutcomeCumulativeMass(entropy *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.SampleUnmodifiedOutcomeCumulativeMass(&_JackpotJunction.CallOpts, entropy)
}

// SampleUnmodifiedOutcomeCumulativeMass is a free data retrieval call binding the contract method 0x6c08995d.
//
// Solidity: function sampleUnmodifiedOutcomeCumulativeMass(uint256 entropy) view returns(uint256)
func (_JackpotJunction *JackpotJunctionCallerSession) SampleUnmodifiedOutcomeCumulativeMass(entropy *big.Int) (*big.Int, error) {
	return _JackpotJunction.Contract.SampleUnmodifiedOutcomeCumulativeMass(&_JackpotJunction.CallOpts, entropy)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_JackpotJunction *JackpotJunctionCaller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "supportsInterface", interfaceID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_JackpotJunction *JackpotJunctionSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _JackpotJunction.Contract.SupportsInterface(&_JackpotJunction.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_JackpotJunction *JackpotJunctionCallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _JackpotJunction.Contract.SupportsInterface(&_JackpotJunction.CallOpts, interfaceID)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 poolID) pure returns(string)
func (_JackpotJunction *JackpotJunctionCaller) Uri(opts *bind.CallOpts, poolID *big.Int) (string, error) {
	var out []interface{}
	err := _JackpotJunction.contract.Call(opts, &out, "uri", poolID)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 poolID) pure returns(string)
func (_JackpotJunction *JackpotJunctionSession) Uri(poolID *big.Int) (string, error) {
	return _JackpotJunction.Contract.Uri(&_JackpotJunction.CallOpts, poolID)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 poolID) pure returns(string)
func (_JackpotJunction *JackpotJunctionCallerSession) Uri(poolID *big.Int) (string, error) {
	return _JackpotJunction.Contract.Uri(&_JackpotJunction.CallOpts, poolID)
}

// Accept is a paid mutator transaction binding the contract method 0x2852b71c.
//
// Solidity: function accept() returns(uint256, uint256, uint256)
func (_JackpotJunction *JackpotJunctionTransactor) Accept(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "accept")
}

// Accept is a paid mutator transaction binding the contract method 0x2852b71c.
//
// Solidity: function accept() returns(uint256, uint256, uint256)
func (_JackpotJunction *JackpotJunctionSession) Accept() (*types.Transaction, error) {
	return _JackpotJunction.Contract.Accept(&_JackpotJunction.TransactOpts)
}

// Accept is a paid mutator transaction binding the contract method 0x2852b71c.
//
// Solidity: function accept() returns(uint256, uint256, uint256)
func (_JackpotJunction *JackpotJunctionTransactorSession) Accept() (*types.Transaction, error) {
	return _JackpotJunction.Contract.Accept(&_JackpotJunction.TransactOpts)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 poolID, uint256 amount) returns()
func (_JackpotJunction *JackpotJunctionTransactor) Burn(opts *bind.TransactOpts, poolID *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "burn", poolID, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 poolID, uint256 amount) returns()
func (_JackpotJunction *JackpotJunctionSession) Burn(poolID *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _JackpotJunction.Contract.Burn(&_JackpotJunction.TransactOpts, poolID, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 poolID, uint256 amount) returns()
func (_JackpotJunction *JackpotJunctionTransactorSession) Burn(poolID *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _JackpotJunction.Contract.Burn(&_JackpotJunction.TransactOpts, poolID, amount)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x83ca4b6f.
//
// Solidity: function burnBatch(uint256[] poolIDs, uint256[] amounts) returns()
func (_JackpotJunction *JackpotJunctionTransactor) BurnBatch(opts *bind.TransactOpts, poolIDs []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "burnBatch", poolIDs, amounts)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x83ca4b6f.
//
// Solidity: function burnBatch(uint256[] poolIDs, uint256[] amounts) returns()
func (_JackpotJunction *JackpotJunctionSession) BurnBatch(poolIDs []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _JackpotJunction.Contract.BurnBatch(&_JackpotJunction.TransactOpts, poolIDs, amounts)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x83ca4b6f.
//
// Solidity: function burnBatch(uint256[] poolIDs, uint256[] amounts) returns()
func (_JackpotJunction *JackpotJunctionTransactorSession) BurnBatch(poolIDs []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _JackpotJunction.Contract.BurnBatch(&_JackpotJunction.TransactOpts, poolIDs, amounts)
}

// Craft is a paid mutator transaction binding the contract method 0x289137a1.
//
// Solidity: function craft(uint256 poolID, uint256 numOutputs) returns(uint256 newPoolID)
func (_JackpotJunction *JackpotJunctionTransactor) Craft(opts *bind.TransactOpts, poolID *big.Int, numOutputs *big.Int) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "craft", poolID, numOutputs)
}

// Craft is a paid mutator transaction binding the contract method 0x289137a1.
//
// Solidity: function craft(uint256 poolID, uint256 numOutputs) returns(uint256 newPoolID)
func (_JackpotJunction *JackpotJunctionSession) Craft(poolID *big.Int, numOutputs *big.Int) (*types.Transaction, error) {
	return _JackpotJunction.Contract.Craft(&_JackpotJunction.TransactOpts, poolID, numOutputs)
}

// Craft is a paid mutator transaction binding the contract method 0x289137a1.
//
// Solidity: function craft(uint256 poolID, uint256 numOutputs) returns(uint256 newPoolID)
func (_JackpotJunction *JackpotJunctionTransactorSession) Craft(poolID *big.Int, numOutputs *big.Int) (*types.Transaction, error) {
	return _JackpotJunction.Contract.Craft(&_JackpotJunction.TransactOpts, poolID, numOutputs)
}

// Equip is a paid mutator transaction binding the contract method 0x03f2f420.
//
// Solidity: function equip(uint256[] poolIDs) returns()
func (_JackpotJunction *JackpotJunctionTransactor) Equip(opts *bind.TransactOpts, poolIDs []*big.Int) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "equip", poolIDs)
}

// Equip is a paid mutator transaction binding the contract method 0x03f2f420.
//
// Solidity: function equip(uint256[] poolIDs) returns()
func (_JackpotJunction *JackpotJunctionSession) Equip(poolIDs []*big.Int) (*types.Transaction, error) {
	return _JackpotJunction.Contract.Equip(&_JackpotJunction.TransactOpts, poolIDs)
}

// Equip is a paid mutator transaction binding the contract method 0x03f2f420.
//
// Solidity: function equip(uint256[] poolIDs) returns()
func (_JackpotJunction *JackpotJunctionTransactorSession) Equip(poolIDs []*big.Int) (*types.Transaction, error) {
	return _JackpotJunction.Contract.Equip(&_JackpotJunction.TransactOpts, poolIDs)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_JackpotJunction *JackpotJunctionTransactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_JackpotJunction *JackpotJunctionSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _JackpotJunction.Contract.OnERC1155BatchReceived(&_JackpotJunction.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_JackpotJunction *JackpotJunctionTransactorSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _JackpotJunction.Contract.OnERC1155BatchReceived(&_JackpotJunction.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_JackpotJunction *JackpotJunctionTransactor) OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_JackpotJunction *JackpotJunctionSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _JackpotJunction.Contract.OnERC1155Received(&_JackpotJunction.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_JackpotJunction *JackpotJunctionTransactorSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _JackpotJunction.Contract.OnERC1155Received(&_JackpotJunction.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// Roll is a paid mutator transaction binding the contract method 0xcd5e3c5d.
//
// Solidity: function roll() payable returns()
func (_JackpotJunction *JackpotJunctionTransactor) Roll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "roll")
}

// Roll is a paid mutator transaction binding the contract method 0xcd5e3c5d.
//
// Solidity: function roll() payable returns()
func (_JackpotJunction *JackpotJunctionSession) Roll() (*types.Transaction, error) {
	return _JackpotJunction.Contract.Roll(&_JackpotJunction.TransactOpts)
}

// Roll is a paid mutator transaction binding the contract method 0xcd5e3c5d.
//
// Solidity: function roll() payable returns()
func (_JackpotJunction *JackpotJunctionTransactorSession) Roll() (*types.Transaction, error) {
	return _JackpotJunction.Contract.Roll(&_JackpotJunction.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_JackpotJunction *JackpotJunctionTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, values, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_JackpotJunction *JackpotJunctionSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _JackpotJunction.Contract.SafeBatchTransferFrom(&_JackpotJunction.TransactOpts, from, to, ids, values, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_JackpotJunction *JackpotJunctionTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _JackpotJunction.Contract.SafeBatchTransferFrom(&_JackpotJunction.TransactOpts, from, to, ids, values, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_JackpotJunction *JackpotJunctionTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "safeTransferFrom", from, to, id, value, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_JackpotJunction *JackpotJunctionSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _JackpotJunction.Contract.SafeTransferFrom(&_JackpotJunction.TransactOpts, from, to, id, value, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_JackpotJunction *JackpotJunctionTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _JackpotJunction.Contract.SafeTransferFrom(&_JackpotJunction.TransactOpts, from, to, id, value, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_JackpotJunction *JackpotJunctionTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_JackpotJunction *JackpotJunctionSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _JackpotJunction.Contract.SetApprovalForAll(&_JackpotJunction.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_JackpotJunction *JackpotJunctionTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _JackpotJunction.Contract.SetApprovalForAll(&_JackpotJunction.TransactOpts, operator, approved)
}

// Unequip is a paid mutator transaction binding the contract method 0xb9c2edf7.
//
// Solidity: function unequip() returns()
func (_JackpotJunction *JackpotJunctionTransactor) Unequip(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _JackpotJunction.contract.Transact(opts, "unequip")
}

// Unequip is a paid mutator transaction binding the contract method 0xb9c2edf7.
//
// Solidity: function unequip() returns()
func (_JackpotJunction *JackpotJunctionSession) Unequip() (*types.Transaction, error) {
	return _JackpotJunction.Contract.Unequip(&_JackpotJunction.TransactOpts)
}

// Unequip is a paid mutator transaction binding the contract method 0xb9c2edf7.
//
// Solidity: function unequip() returns()
func (_JackpotJunction *JackpotJunctionTransactorSession) Unequip() (*types.Transaction, error) {
	return _JackpotJunction.Contract.Unequip(&_JackpotJunction.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_JackpotJunction *JackpotJunctionTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _JackpotJunction.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_JackpotJunction *JackpotJunctionSession) Receive() (*types.Transaction, error) {
	return _JackpotJunction.Contract.Receive(&_JackpotJunction.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_JackpotJunction *JackpotJunctionTransactorSession) Receive() (*types.Transaction, error) {
	return _JackpotJunction.Contract.Receive(&_JackpotJunction.TransactOpts)
}

// JackpotJunctionApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the JackpotJunction contract.
type JackpotJunctionApprovalForAllIterator struct {
	Event *JackpotJunctionApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *JackpotJunctionApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(JackpotJunctionApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(JackpotJunctionApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *JackpotJunctionApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *JackpotJunctionApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// JackpotJunctionApprovalForAll represents a ApprovalForAll event raised by the JackpotJunction contract.
type JackpotJunctionApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_JackpotJunction *JackpotJunctionFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*JackpotJunctionApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _JackpotJunction.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &JackpotJunctionApprovalForAllIterator{contract: _JackpotJunction.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_JackpotJunction *JackpotJunctionFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *JackpotJunctionApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _JackpotJunction.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(JackpotJunctionApprovalForAll)
				if err := _JackpotJunction.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_JackpotJunction *JackpotJunctionFilterer) ParseApprovalForAll(log types.Log) (*JackpotJunctionApprovalForAll, error) {
	event := new(JackpotJunctionApprovalForAll)
	if err := _JackpotJunction.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// JackpotJunctionAwardIterator is returned from FilterAward and is used to iterate over the raw logs and unpacked data for Award events raised by the JackpotJunction contract.
type JackpotJunctionAwardIterator struct {
	Event *JackpotJunctionAward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *JackpotJunctionAwardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(JackpotJunctionAward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(JackpotJunctionAward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *JackpotJunctionAwardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *JackpotJunctionAwardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// JackpotJunctionAward represents a Award event raised by the JackpotJunction contract.
type JackpotJunctionAward struct {
	Player  common.Address
	Outcome *big.Int
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAward is a free log retrieval operation binding the contract event 0x1187560d7b166b3122e71aedb88f19cf2f33b2d141b513fde3ca2562d19d1bcb.
//
// Solidity: event Award(address indexed player, uint256 indexed outcome, uint256 value)
func (_JackpotJunction *JackpotJunctionFilterer) FilterAward(opts *bind.FilterOpts, player []common.Address, outcome []*big.Int) (*JackpotJunctionAwardIterator, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}
	var outcomeRule []interface{}
	for _, outcomeItem := range outcome {
		outcomeRule = append(outcomeRule, outcomeItem)
	}

	logs, sub, err := _JackpotJunction.contract.FilterLogs(opts, "Award", playerRule, outcomeRule)
	if err != nil {
		return nil, err
	}
	return &JackpotJunctionAwardIterator{contract: _JackpotJunction.contract, event: "Award", logs: logs, sub: sub}, nil
}

// WatchAward is a free log subscription operation binding the contract event 0x1187560d7b166b3122e71aedb88f19cf2f33b2d141b513fde3ca2562d19d1bcb.
//
// Solidity: event Award(address indexed player, uint256 indexed outcome, uint256 value)
func (_JackpotJunction *JackpotJunctionFilterer) WatchAward(opts *bind.WatchOpts, sink chan<- *JackpotJunctionAward, player []common.Address, outcome []*big.Int) (event.Subscription, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}
	var outcomeRule []interface{}
	for _, outcomeItem := range outcome {
		outcomeRule = append(outcomeRule, outcomeItem)
	}

	logs, sub, err := _JackpotJunction.contract.WatchLogs(opts, "Award", playerRule, outcomeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(JackpotJunctionAward)
				if err := _JackpotJunction.contract.UnpackLog(event, "Award", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAward is a log parse operation binding the contract event 0x1187560d7b166b3122e71aedb88f19cf2f33b2d141b513fde3ca2562d19d1bcb.
//
// Solidity: event Award(address indexed player, uint256 indexed outcome, uint256 value)
func (_JackpotJunction *JackpotJunctionFilterer) ParseAward(log types.Log) (*JackpotJunctionAward, error) {
	event := new(JackpotJunctionAward)
	if err := _JackpotJunction.contract.UnpackLog(event, "Award", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// JackpotJunctionRollIterator is returned from FilterRoll and is used to iterate over the raw logs and unpacked data for Roll events raised by the JackpotJunction contract.
type JackpotJunctionRollIterator struct {
	Event *JackpotJunctionRoll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *JackpotJunctionRollIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(JackpotJunctionRoll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(JackpotJunctionRoll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *JackpotJunctionRollIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *JackpotJunctionRollIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// JackpotJunctionRoll represents a Roll event raised by the JackpotJunction contract.
type JackpotJunctionRoll struct {
	Player common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRoll is a free log retrieval operation binding the contract event 0x663b85167cccb9640fb0a935c4853ea50b0f3dd07d2590ca19942153136cef56.
//
// Solidity: event Roll(address indexed player)
func (_JackpotJunction *JackpotJunctionFilterer) FilterRoll(opts *bind.FilterOpts, player []common.Address) (*JackpotJunctionRollIterator, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}

	logs, sub, err := _JackpotJunction.contract.FilterLogs(opts, "Roll", playerRule)
	if err != nil {
		return nil, err
	}
	return &JackpotJunctionRollIterator{contract: _JackpotJunction.contract, event: "Roll", logs: logs, sub: sub}, nil
}

// WatchRoll is a free log subscription operation binding the contract event 0x663b85167cccb9640fb0a935c4853ea50b0f3dd07d2590ca19942153136cef56.
//
// Solidity: event Roll(address indexed player)
func (_JackpotJunction *JackpotJunctionFilterer) WatchRoll(opts *bind.WatchOpts, sink chan<- *JackpotJunctionRoll, player []common.Address) (event.Subscription, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}

	logs, sub, err := _JackpotJunction.contract.WatchLogs(opts, "Roll", playerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(JackpotJunctionRoll)
				if err := _JackpotJunction.contract.UnpackLog(event, "Roll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoll is a log parse operation binding the contract event 0x663b85167cccb9640fb0a935c4853ea50b0f3dd07d2590ca19942153136cef56.
//
// Solidity: event Roll(address indexed player)
func (_JackpotJunction *JackpotJunctionFilterer) ParseRoll(log types.Log) (*JackpotJunctionRoll, error) {
	event := new(JackpotJunctionRoll)
	if err := _JackpotJunction.contract.UnpackLog(event, "Roll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// JackpotJunctionTierUnlockedIterator is returned from FilterTierUnlocked and is used to iterate over the raw logs and unpacked data for TierUnlocked events raised by the JackpotJunction contract.
type JackpotJunctionTierUnlockedIterator struct {
	Event *JackpotJunctionTierUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *JackpotJunctionTierUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(JackpotJunctionTierUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(JackpotJunctionTierUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *JackpotJunctionTierUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *JackpotJunctionTierUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// JackpotJunctionTierUnlocked represents a TierUnlocked event raised by the JackpotJunction contract.
type JackpotJunctionTierUnlocked struct {
	ItemType    *big.Int
	TerrainType *big.Int
	Tier        *big.Int
	PoolID      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterTierUnlocked is a free log retrieval operation binding the contract event 0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629.
//
// Solidity: event TierUnlocked(uint256 indexed itemType, uint256 indexed terrainType, uint256 indexed tier, uint256 poolID)
func (_JackpotJunction *JackpotJunctionFilterer) FilterTierUnlocked(opts *bind.FilterOpts, itemType []*big.Int, terrainType []*big.Int, tier []*big.Int) (*JackpotJunctionTierUnlockedIterator, error) {

	var itemTypeRule []interface{}
	for _, itemTypeItem := range itemType {
		itemTypeRule = append(itemTypeRule, itemTypeItem)
	}
	var terrainTypeRule []interface{}
	for _, terrainTypeItem := range terrainType {
		terrainTypeRule = append(terrainTypeRule, terrainTypeItem)
	}
	var tierRule []interface{}
	for _, tierItem := range tier {
		tierRule = append(tierRule, tierItem)
	}

	logs, sub, err := _JackpotJunction.contract.FilterLogs(opts, "TierUnlocked", itemTypeRule, terrainTypeRule, tierRule)
	if err != nil {
		return nil, err
	}
	return &JackpotJunctionTierUnlockedIterator{contract: _JackpotJunction.contract, event: "TierUnlocked", logs: logs, sub: sub}, nil
}

// WatchTierUnlocked is a free log subscription operation binding the contract event 0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629.
//
// Solidity: event TierUnlocked(uint256 indexed itemType, uint256 indexed terrainType, uint256 indexed tier, uint256 poolID)
func (_JackpotJunction *JackpotJunctionFilterer) WatchTierUnlocked(opts *bind.WatchOpts, sink chan<- *JackpotJunctionTierUnlocked, itemType []*big.Int, terrainType []*big.Int, tier []*big.Int) (event.Subscription, error) {

	var itemTypeRule []interface{}
	for _, itemTypeItem := range itemType {
		itemTypeRule = append(itemTypeRule, itemTypeItem)
	}
	var terrainTypeRule []interface{}
	for _, terrainTypeItem := range terrainType {
		terrainTypeRule = append(terrainTypeRule, terrainTypeItem)
	}
	var tierRule []interface{}
	for _, tierItem := range tier {
		tierRule = append(tierRule, tierItem)
	}

	logs, sub, err := _JackpotJunction.contract.WatchLogs(opts, "TierUnlocked", itemTypeRule, terrainTypeRule, tierRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(JackpotJunctionTierUnlocked)
				if err := _JackpotJunction.contract.UnpackLog(event, "TierUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTierUnlocked is a log parse operation binding the contract event 0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629.
//
// Solidity: event TierUnlocked(uint256 indexed itemType, uint256 indexed terrainType, uint256 indexed tier, uint256 poolID)
func (_JackpotJunction *JackpotJunctionFilterer) ParseTierUnlocked(log types.Log) (*JackpotJunctionTierUnlocked, error) {
	event := new(JackpotJunctionTierUnlocked)
	if err := _JackpotJunction.contract.UnpackLog(event, "TierUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// JackpotJunctionTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the JackpotJunction contract.
type JackpotJunctionTransferBatchIterator struct {
	Event *JackpotJunctionTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *JackpotJunctionTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(JackpotJunctionTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(JackpotJunctionTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *JackpotJunctionTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *JackpotJunctionTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// JackpotJunctionTransferBatch represents a TransferBatch event raised by the JackpotJunction contract.
type JackpotJunctionTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_JackpotJunction *JackpotJunctionFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*JackpotJunctionTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _JackpotJunction.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &JackpotJunctionTransferBatchIterator{contract: _JackpotJunction.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_JackpotJunction *JackpotJunctionFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *JackpotJunctionTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _JackpotJunction.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(JackpotJunctionTransferBatch)
				if err := _JackpotJunction.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_JackpotJunction *JackpotJunctionFilterer) ParseTransferBatch(log types.Log) (*JackpotJunctionTransferBatch, error) {
	event := new(JackpotJunctionTransferBatch)
	if err := _JackpotJunction.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// JackpotJunctionTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the JackpotJunction contract.
type JackpotJunctionTransferSingleIterator struct {
	Event *JackpotJunctionTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *JackpotJunctionTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(JackpotJunctionTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(JackpotJunctionTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *JackpotJunctionTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *JackpotJunctionTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// JackpotJunctionTransferSingle represents a TransferSingle event raised by the JackpotJunction contract.
type JackpotJunctionTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_JackpotJunction *JackpotJunctionFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*JackpotJunctionTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _JackpotJunction.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &JackpotJunctionTransferSingleIterator{contract: _JackpotJunction.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_JackpotJunction *JackpotJunctionFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *JackpotJunctionTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _JackpotJunction.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(JackpotJunctionTransferSingle)
				if err := _JackpotJunction.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_JackpotJunction *JackpotJunctionFilterer) ParseTransferSingle(log types.Log) (*JackpotJunctionTransferSingle, error) {
	event := new(JackpotJunctionTransferSingle)
	if err := _JackpotJunction.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// JackpotJunctionURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the JackpotJunction contract.
type JackpotJunctionURIIterator struct {
	Event *JackpotJunctionURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *JackpotJunctionURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(JackpotJunctionURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(JackpotJunctionURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *JackpotJunctionURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *JackpotJunctionURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// JackpotJunctionURI represents a URI event raised by the JackpotJunction contract.
type JackpotJunctionURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_JackpotJunction *JackpotJunctionFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*JackpotJunctionURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _JackpotJunction.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &JackpotJunctionURIIterator{contract: _JackpotJunction.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_JackpotJunction *JackpotJunctionFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *JackpotJunctionURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _JackpotJunction.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(JackpotJunctionURI)
				if err := _JackpotJunction.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_JackpotJunction *JackpotJunctionFilterer) ParseURI(log types.Log) (*JackpotJunctionURI, error) {
	event := new(JackpotJunctionURI)
	if err := _JackpotJunction.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateJackpotJunctionDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	var blocksToAct *big.Int
	var blocksToActRaw string
	var costToRoll *big.Int
	var costToRollRaw string
	var costToReroll *big.Int
	var costToRerollRaw string

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			if blocksToActRaw == "" {
				return fmt.Errorf("--blocks-to-act argument not specified")
			}
			blocksToAct = new(big.Int)
			blocksToAct.SetString(blocksToActRaw, 0)

			if costToRollRaw == "" {
				return fmt.Errorf("--cost-to-roll argument not specified")
			}
			costToRoll = new(big.Int)
			costToRoll.SetString(costToRollRaw, 0)

			if costToRerollRaw == "" {
				return fmt.Errorf("--cost-to-reroll argument not specified")
			}
			costToReroll = new(big.Int)
			costToReroll.SetString(costToRerollRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployJackpotJunction(
				transactionOpts,
				client,
				blocksToAct,
				costToRoll,
				costToReroll,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	cmd.Flags().StringVar(&blocksToActRaw, "blocks-to-act", "", "blocks-to-act argument")
	cmd.Flags().StringVar(&costToRollRaw, "cost-to-roll", "", "cost-to-roll argument")
	cmd.Flags().StringVar(&costToRerollRaw, "cost-to-reroll", "", "cost-to-reroll argument")

	return cmd
}

func CreateEquippedCoverCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "equipped-cover",
		Short: "Call the EquippedCover view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.EquippedCover(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateBalanceOfBatchCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var accounts []common.Address
	var accountsRaw string
	var ids []*big.Int
	var idsRaw string

	var capture0 []*big.Int

	cmd := &cobra.Command{
		Use:   "balance-of-batch",
		Short: "Call the BalanceOfBatch view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if accountsRaw == "" {
				return fmt.Errorf("--accounts argument not specified")
			} else if strings.HasPrefix(accountsRaw, "@") {
				filename := strings.TrimPrefix(accountsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &accounts)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(accountsRaw), &accounts)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if idsRaw == "" {
				return fmt.Errorf("--ids argument not specified")
			} else if strings.HasPrefix(idsRaw, "@") {
				filename := strings.TrimPrefix(idsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &ids)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(idsRaw), &ids)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.BalanceOfBatch(
				accounts,
				ids,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&accountsRaw, "accounts", "", "accounts argument")
	cmd.Flags().StringVar(&idsRaw, "ids", "", "ids argument")

	return cmd
}
func CreateCurrentRewardsCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 struct {
		Small  *big.Int
		Medium *big.Int
		Large  *big.Int
	}

	cmd := &cobra.Command{
		Use:   "current-rewards",
		Short: "Call the CurrentRewards view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CurrentRewards()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateGeneraCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var poolID *big.Int
	var poolIDRaw string

	var capture0 struct {
		ItemType    *big.Int
		TerrainType *big.Int
		Tier        *big.Int
	}

	cmd := &cobra.Command{
		Use:   "genera",
		Short: "Call the Genera view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolID = new(big.Int)
			poolID.SetString(poolIDRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Genera(
				poolID,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&poolIDRaw, "pool-id", "", "pool-id argument")

	return cmd
}
func CreateIsApprovedForAllCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var account common.Address
	var accountRaw string
	var operator common.Address
	var operatorRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "is-approved-for-all",
		Short: "Call the IsApprovedForAll view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if accountRaw == "" {
				return fmt.Errorf("--account argument not specified")
			} else if !common.IsHexAddress(accountRaw) {
				return fmt.Errorf("--account argument is not a valid Ethereum address")
			}
			account = common.HexToAddress(accountRaw)

			if operatorRaw == "" {
				return fmt.Errorf("--operator argument not specified")
			} else if !common.IsHexAddress(operatorRaw) {
				return fmt.Errorf("--operator argument is not a valid Ethereum address")
			}
			operator = common.HexToAddress(operatorRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.IsApprovedForAll(
				account,
				operator,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&accountRaw, "account", "", "account argument")
	cmd.Flags().StringVar(&operatorRaw, "operator", "", "operator argument")

	return cmd
}
func CreateOutcomeCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var degenerate common.Address
	var degenerateRaw string
	var bonus bool
	var bonusRaw string

	var capture0 *big.Int
	var capture1 *big.Int
	var capture2 *big.Int

	cmd := &cobra.Command{
		Use:   "outcome",
		Short: "Call the Outcome view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if degenerateRaw == "" {
				return fmt.Errorf("--degenerate argument not specified")
			} else if !common.IsHexAddress(degenerateRaw) {
				return fmt.Errorf("--degenerate argument is not a valid Ethereum address")
			}
			degenerate = common.HexToAddress(degenerateRaw)

			bonusRawLower := strings.ToLower(bonusRaw)
			switch bonusRawLower {
			case "true", "t", "y", "yes", "1":
				bonus = true
			case "false", "f", "n", "no", "0":
				bonus = false
			default:
				return fmt.Errorf("--bonus argument is not valid (value: %s)", bonusRaw)
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, capture1, capture2, callErr = session.Outcome(
				degenerate,
				bonus,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())
			cmd.Printf("1: %s\n", capture1.String())
			cmd.Printf("2: %s\n", capture2.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&degenerateRaw, "degenerate", "", "degenerate argument")
	cmd.Flags().StringVar(&bonusRaw, "bonus", "", "bonus argument (true, t, y, yes, 1 OR false, f, n, no, 0)")

	return cmd
}
func CreateCostToRerollCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "cost-to-reroll",
		Short: "Call the CostToReroll view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CostToReroll()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateCostToRollCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "cost-to-roll",
		Short: "Call the CostToRoll view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CostToRoll()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateSampleUnmodifiedOutcomeCumulativeMassCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var entropy *big.Int
	var entropyRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "sample-unmodified-outcome-cumulative-mass",
		Short: "Call the SampleUnmodifiedOutcomeCumulativeMass view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if entropyRaw == "" {
				return fmt.Errorf("--entropy argument not specified")
			}
			entropy = new(big.Int)
			entropy.SetString(entropyRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SampleUnmodifiedOutcomeCumulativeMass(
				entropy,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&entropyRaw, "entropy", "", "entropy argument")

	return cmd
}
func CreateLastRollBlockCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "last-roll-block",
		Short: "Call the LastRollBlock view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastRollBlock(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateBalanceOfCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var account common.Address
	var accountRaw string
	var id *big.Int
	var idRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "balance-of",
		Short: "Call the BalanceOf view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if accountRaw == "" {
				return fmt.Errorf("--account argument not specified")
			} else if !common.IsHexAddress(accountRaw) {
				return fmt.Errorf("--account argument is not a valid Ethereum address")
			}
			account = common.HexToAddress(accountRaw)

			if idRaw == "" {
				return fmt.Errorf("--id argument not specified")
			}
			id = new(big.Int)
			id.SetString(idRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.BalanceOf(
				account,
				id,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&accountRaw, "account", "", "account argument")
	cmd.Flags().StringVar(&idRaw, "id", "", "id argument")

	return cmd
}
func CreateHasBonusCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var degenerate common.Address
	var degenerateRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "has-bonus",
		Short: "Call the HasBonus view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if degenerateRaw == "" {
				return fmt.Errorf("--degenerate argument not specified")
			} else if !common.IsHexAddress(degenerateRaw) {
				return fmt.Errorf("--degenerate argument is not a valid Ethereum address")
			}
			degenerate = common.HexToAddress(degenerateRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.HasBonus(
				degenerate,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&degenerateRaw, "degenerate", "", "degenerate argument")

	return cmd
}
func CreateBlocksToActCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "blocks-to-act",
		Short: "Call the BlocksToAct view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.BlocksToAct()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateImprovedOutcomesCumulativeMassCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "improved-outcomes-cumulative-mass",
		Short: "Call the ImprovedOutcomesCumulativeMass view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ImprovedOutcomesCumulativeMass(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateUnmodifiedOutcomesCumulativeMassCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "unmodified-outcomes-cumulative-mass",
		Short: "Call the UnmodifiedOutcomesCumulativeMass view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.UnmodifiedOutcomesCumulativeMass(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateEquippedBeastsCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "equipped-beasts",
		Short: "Call the EquippedBeasts view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.EquippedBeasts(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateEquippedBodyCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "equipped-body",
		Short: "Call the EquippedBody view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.EquippedBody(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreatePoolMetadataCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var poolID *big.Int
	var poolIDRaw string

	var capture0 []byte

	cmd := &cobra.Command{
		Use:   "pool-metadata",
		Short: "Call the PoolMetadata view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolID = new(big.Int)
			poolID.SetString(poolIDRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PoolMetadata(
				poolID,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&poolIDRaw, "pool-id", "", "pool-id argument")

	return cmd
}
func CreateSampleImprovedOutcomesCumulativeMassCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var entropy *big.Int
	var entropyRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "sample-improved-outcomes-cumulative-mass",
		Short: "Call the SampleImprovedOutcomesCumulativeMass view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if entropyRaw == "" {
				return fmt.Errorf("--entropy argument not specified")
			}
			entropy = new(big.Int)
			entropy.SetString(entropyRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SampleImprovedOutcomesCumulativeMass(
				entropy,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&entropyRaw, "entropy", "", "entropy argument")

	return cmd
}
func CreateSupportsInterfaceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var interfaceID [4]byte
	var interfaceIDRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "supports-interface",
		Short: "Call the SupportsInterface view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var hexDecodeinterfaceIDErr error

			var intermediateinterfaceIDLeaf []byte
			intermediateinterfaceIDLeaf, hexDecodeinterfaceIDErr = hex.DecodeString(interfaceIDRaw)
			if hexDecodeinterfaceIDErr != nil {
				return hexDecodeinterfaceIDErr
			}
			interfaceID = [4]byte(intermediateinterfaceIDLeaf[:4])

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SupportsInterface(
				interfaceID,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&interfaceIDRaw, "interface-id", "", "interface-id argument")

	return cmd
}
func CreateUriCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var poolID *big.Int
	var poolIDRaw string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "uri",
		Short: "Call the Uri view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolID = new(big.Int)
			poolID.SetString(poolIDRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Uri(
				poolID,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&poolIDRaw, "pool-id", "", "pool-id argument")

	return cmd
}
func CreateCurrentTierCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "current-tier",
		Short: "Call the CurrentTier view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CurrentTier(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateEquippedWheelsCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "equipped-wheels",
		Short: "Call the EquippedWheels view method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := JackpotJunctionCallerSession{
				Contract: &contract.JackpotJunctionCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.EquippedWheels(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}

func CreateCraftCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var poolID *big.Int
	var poolIDRaw string
	var numOutputs *big.Int
	var numOutputsRaw string

	cmd := &cobra.Command{
		Use:   "craft",
		Short: "Execute the Craft method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolID = new(big.Int)
			poolID.SetString(poolIDRaw, 0)

			if numOutputsRaw == "" {
				return fmt.Errorf("--num-outputs argument not specified")
			}
			numOutputs = new(big.Int)
			numOutputs.SetString(numOutputsRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Craft(
				poolID,
				numOutputs,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&poolIDRaw, "pool-id", "", "pool-id argument")
	cmd.Flags().StringVar(&numOutputsRaw, "num-outputs", "", "num-outputs argument")

	return cmd
}
func CreateEquipCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var poolIDs []*big.Int
	var poolIDsRaw string

	cmd := &cobra.Command{
		Use:   "equip",
		Short: "Execute the Equip method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDsRaw == "" {
				return fmt.Errorf("--pool-i-ds argument not specified")
			} else if strings.HasPrefix(poolIDsRaw, "@") {
				filename := strings.TrimPrefix(poolIDsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &poolIDs)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(poolIDsRaw), &poolIDs)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Equip(
				poolIDs,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&poolIDsRaw, "pool-i-ds", "", "pool-i-ds argument")

	return cmd
}
func CreateBurnCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var poolID *big.Int
	var poolIDRaw string
	var amount *big.Int
	var amountRaw string

	cmd := &cobra.Command{
		Use:   "burn",
		Short: "Execute the Burn method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolID = new(big.Int)
			poolID.SetString(poolIDRaw, 0)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Burn(
				poolID,
				amount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&poolIDRaw, "pool-id", "", "pool-id argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")

	return cmd
}
func CreateAcceptCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "accept",
		Short: "Execute the Accept method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Accept()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}
func CreateBurnBatchCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var poolIDs []*big.Int
	var poolIDsRaw string
	var amounts []*big.Int
	var amountsRaw string

	cmd := &cobra.Command{
		Use:   "burn-batch",
		Short: "Execute the BurnBatch method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDsRaw == "" {
				return fmt.Errorf("--pool-i-ds argument not specified")
			} else if strings.HasPrefix(poolIDsRaw, "@") {
				filename := strings.TrimPrefix(poolIDsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &poolIDs)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(poolIDsRaw), &poolIDs)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if amountsRaw == "" {
				return fmt.Errorf("--amounts argument not specified")
			} else if strings.HasPrefix(amountsRaw, "@") {
				filename := strings.TrimPrefix(amountsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &amounts)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(amountsRaw), &amounts)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.BurnBatch(
				poolIDs,
				amounts,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&poolIDsRaw, "pool-i-ds", "", "pool-i-ds argument")
	cmd.Flags().StringVar(&amountsRaw, "amounts", "", "amounts argument")

	return cmd
}
func CreateOnErc1155BatchReceivedCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string
	var arg2 []*big.Int
	var arg2Raw string
	var arg3 []*big.Int
	var arg3Raw string
	var arg4 []byte
	var arg4Raw string

	cmd := &cobra.Command{
		Use:   "on-erc-1155-batch-received",
		Short: "Execute the OnERC1155BatchReceived method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if strings.HasPrefix(arg2Raw, "@") {
				filename := strings.TrimPrefix(arg2Raw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &arg2)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(arg2Raw), &arg2)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			} else if strings.HasPrefix(arg3Raw, "@") {
				filename := strings.TrimPrefix(arg3Raw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &arg3)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(arg3Raw), &arg3)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			var hexDecodearg4Err error

			arg4, hexDecodearg4Err = hex.DecodeString(arg4Raw)
			if hexDecodearg4Err != nil {
				return hexDecodearg4Err
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OnERC1155BatchReceived(
				arg0,
				arg1,
				arg2,
				arg3,
				arg4,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument")

	return cmd
}
func CreateRollCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "roll",
		Short: "Execute the Roll method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Roll()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}
func CreateSafeTransferFromCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var from0 common.Address
	var from0Raw string
	var to0 common.Address
	var to0Raw string
	var id *big.Int
	var idRaw string
	var value0 *big.Int
	var value0Raw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "safe-transfer-from",
		Short: "Execute the SafeTransferFrom method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if from0Raw == "" {
				return fmt.Errorf("--from-0 argument not specified")
			} else if !common.IsHexAddress(from0Raw) {
				return fmt.Errorf("--from-0 argument is not a valid Ethereum address")
			}
			from0 = common.HexToAddress(from0Raw)

			if to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			to0 = common.HexToAddress(to0Raw)

			if idRaw == "" {
				return fmt.Errorf("--id argument not specified")
			}
			id = new(big.Int)
			id.SetString(idRaw, 0)

			if value0Raw == "" {
				return fmt.Errorf("--value-0 argument not specified")
			}
			value0 = new(big.Int)
			value0.SetString(value0Raw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SafeTransferFrom(
				from0,
				to0,
				id,
				value0,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&from0Raw, "from-0", "", "from-0 argument")
	cmd.Flags().StringVar(&to0Raw, "to-0", "", "to-0 argument")
	cmd.Flags().StringVar(&idRaw, "id", "", "id argument")
	cmd.Flags().StringVar(&value0Raw, "value-0", "", "value-0 argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateSetApprovalForAllCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var operator common.Address
	var operatorRaw string
	var approved bool
	var approvedRaw string

	cmd := &cobra.Command{
		Use:   "set-approval-for-all",
		Short: "Execute the SetApprovalForAll method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if operatorRaw == "" {
				return fmt.Errorf("--operator argument not specified")
			} else if !common.IsHexAddress(operatorRaw) {
				return fmt.Errorf("--operator argument is not a valid Ethereum address")
			}
			operator = common.HexToAddress(operatorRaw)

			approvedRawLower := strings.ToLower(approvedRaw)
			switch approvedRawLower {
			case "true", "t", "y", "yes", "1":
				approved = true
			case "false", "f", "n", "no", "0":
				approved = false
			default:
				return fmt.Errorf("--approved argument is not valid (value: %s)", approvedRaw)
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetApprovalForAll(
				operator,
				approved,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&operatorRaw, "operator", "", "operator argument")
	cmd.Flags().StringVar(&approvedRaw, "approved", "", "approved argument (true, t, y, yes, 1 OR false, f, n, no, 0)")

	return cmd
}
func CreateReceiveCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "receive",
		Short: "Execute the Receive method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Receive()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}
func CreateOnErc1155ReceivedCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string
	var arg2 *big.Int
	var arg2Raw string
	var arg3 *big.Int
	var arg3Raw string
	var arg4 []byte
	var arg4Raw string

	cmd := &cobra.Command{
		Use:   "on-erc-1155-received",
		Short: "Execute the OnERC1155Received method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			}
			arg2 = new(big.Int)
			arg2.SetString(arg2Raw, 0)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			var hexDecodearg4Err error

			arg4, hexDecodearg4Err = hex.DecodeString(arg4Raw)
			if hexDecodearg4Err != nil {
				return hexDecodearg4Err
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OnERC1155Received(
				arg0,
				arg1,
				arg2,
				arg3,
				arg4,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument")

	return cmd
}
func CreateSafeBatchTransferFromCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var from0 common.Address
	var from0Raw string
	var to0 common.Address
	var to0Raw string
	var ids []*big.Int
	var idsRaw string
	var values []*big.Int
	var valuesRaw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "safe-batch-transfer-from",
		Short: "Execute the SafeBatchTransferFrom method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if from0Raw == "" {
				return fmt.Errorf("--from-0 argument not specified")
			} else if !common.IsHexAddress(from0Raw) {
				return fmt.Errorf("--from-0 argument is not a valid Ethereum address")
			}
			from0 = common.HexToAddress(from0Raw)

			if to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			to0 = common.HexToAddress(to0Raw)

			if idsRaw == "" {
				return fmt.Errorf("--ids argument not specified")
			} else if strings.HasPrefix(idsRaw, "@") {
				filename := strings.TrimPrefix(idsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &ids)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(idsRaw), &ids)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if valuesRaw == "" {
				return fmt.Errorf("--values argument not specified")
			} else if strings.HasPrefix(valuesRaw, "@") {
				filename := strings.TrimPrefix(valuesRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &values)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(valuesRaw), &values)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SafeBatchTransferFrom(
				from0,
				to0,
				ids,
				values,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&from0Raw, "from-0", "", "from-0 argument")
	cmd.Flags().StringVar(&to0Raw, "to-0", "", "to-0 argument")
	cmd.Flags().StringVar(&idsRaw, "ids", "", "ids argument")
	cmd.Flags().StringVar(&valuesRaw, "values", "", "values argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateUnequipCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "unequip",
		Short: "Execute the Unequip method on a JackpotJunction contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewJackpotJunction(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := JackpotJunctionTransactorSession{
				Contract:     &contract.JackpotJunctionTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Unequip()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the JACKPOT_JUNCTION_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the JACKPOT_JUNCTION_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("JACKPOT_JUNCTION_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateJackpotJunctionCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "jackpot-junction",
		Short: "Interact with the JackpotJunction contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployJackpotJunction := CreateJackpotJunctionDeploymentCommand()
	cmdDeployJackpotJunction.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployJackpotJunction)

	cmdViewEquippedCover := CreateEquippedCoverCommand()
	cmdViewEquippedCover.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewEquippedCover)
	cmdViewBalanceOfBatch := CreateBalanceOfBatchCommand()
	cmdViewBalanceOfBatch.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewBalanceOfBatch)
	cmdViewCurrentRewards := CreateCurrentRewardsCommand()
	cmdViewCurrentRewards.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCurrentRewards)
	cmdViewGenera := CreateGeneraCommand()
	cmdViewGenera.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGenera)
	cmdViewIsApprovedForAll := CreateIsApprovedForAllCommand()
	cmdViewIsApprovedForAll.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewIsApprovedForAll)
	cmdViewOutcome := CreateOutcomeCommand()
	cmdViewOutcome.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewOutcome)
	cmdViewCostToReroll := CreateCostToRerollCommand()
	cmdViewCostToReroll.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCostToReroll)
	cmdViewCostToRoll := CreateCostToRollCommand()
	cmdViewCostToRoll.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCostToRoll)
	cmdViewSampleUnmodifiedOutcomeCumulativeMass := CreateSampleUnmodifiedOutcomeCumulativeMassCommand()
	cmdViewSampleUnmodifiedOutcomeCumulativeMass.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSampleUnmodifiedOutcomeCumulativeMass)
	cmdViewLastRollBlock := CreateLastRollBlockCommand()
	cmdViewLastRollBlock.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastRollBlock)
	cmdViewBalanceOf := CreateBalanceOfCommand()
	cmdViewBalanceOf.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewBalanceOf)
	cmdViewHasBonus := CreateHasBonusCommand()
	cmdViewHasBonus.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewHasBonus)
	cmdViewBlocksToAct := CreateBlocksToActCommand()
	cmdViewBlocksToAct.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewBlocksToAct)
	cmdViewImprovedOutcomesCumulativeMass := CreateImprovedOutcomesCumulativeMassCommand()
	cmdViewImprovedOutcomesCumulativeMass.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewImprovedOutcomesCumulativeMass)
	cmdViewUnmodifiedOutcomesCumulativeMass := CreateUnmodifiedOutcomesCumulativeMassCommand()
	cmdViewUnmodifiedOutcomesCumulativeMass.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewUnmodifiedOutcomesCumulativeMass)
	cmdViewEquippedBeasts := CreateEquippedBeastsCommand()
	cmdViewEquippedBeasts.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewEquippedBeasts)
	cmdViewEquippedBody := CreateEquippedBodyCommand()
	cmdViewEquippedBody.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewEquippedBody)
	cmdViewPoolMetadata := CreatePoolMetadataCommand()
	cmdViewPoolMetadata.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPoolMetadata)
	cmdViewSampleImprovedOutcomesCumulativeMass := CreateSampleImprovedOutcomesCumulativeMassCommand()
	cmdViewSampleImprovedOutcomesCumulativeMass.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSampleImprovedOutcomesCumulativeMass)
	cmdViewSupportsInterface := CreateSupportsInterfaceCommand()
	cmdViewSupportsInterface.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSupportsInterface)
	cmdViewUri := CreateUriCommand()
	cmdViewUri.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewUri)
	cmdViewCurrentTier := CreateCurrentTierCommand()
	cmdViewCurrentTier.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCurrentTier)
	cmdViewEquippedWheels := CreateEquippedWheelsCommand()
	cmdViewEquippedWheels.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewEquippedWheels)

	cmdTransactCraft := CreateCraftCommand()
	cmdTransactCraft.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCraft)
	cmdTransactEquip := CreateEquipCommand()
	cmdTransactEquip.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactEquip)
	cmdTransactBurn := CreateBurnCommand()
	cmdTransactBurn.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactBurn)
	cmdTransactAccept := CreateAcceptCommand()
	cmdTransactAccept.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactAccept)
	cmdTransactBurnBatch := CreateBurnBatchCommand()
	cmdTransactBurnBatch.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactBurnBatch)
	cmdTransactOnERC1155BatchReceived := CreateOnErc1155BatchReceivedCommand()
	cmdTransactOnERC1155BatchReceived.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOnERC1155BatchReceived)
	cmdTransactRoll := CreateRollCommand()
	cmdTransactRoll.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactRoll)
	cmdTransactSafeTransferFrom := CreateSafeTransferFromCommand()
	cmdTransactSafeTransferFrom.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSafeTransferFrom)
	cmdTransactSetApprovalForAll := CreateSetApprovalForAllCommand()
	cmdTransactSetApprovalForAll.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetApprovalForAll)
	cmdTransactReceive := CreateReceiveCommand()
	cmdTransactReceive.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactReceive)
	cmdTransactOnERC1155Received := CreateOnErc1155ReceivedCommand()
	cmdTransactOnERC1155Received.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOnERC1155Received)
	cmdTransactSafeBatchTransferFrom := CreateSafeBatchTransferFromCommand()
	cmdTransactSafeBatchTransferFrom.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSafeBatchTransferFrom)
	cmdTransactUnequip := CreateUnequipCommand()
	cmdTransactUnequip.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactUnequip)

	return cmd
}
